{
  "address": "0xfDeB38347018bEfac74bC7470d55D7d5e05B8FCe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOracleAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "knowledgeBaseCID",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chatId",
          "type": "uint256"
        }
      ],
      "name": "ChatCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "OracleAddressUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RunSalesmanNPC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "addMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chatRuns",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "messagesCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chatId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryContents",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chatId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryRoles",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "knowledgeBase",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "documents",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "onOracleKnowledgeBaseQueryResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "response",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "onOracleLlmResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "startChat",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xfb5f38840d0f6571c6a98316411a039ad997f01af4059eb06f751c6171fc5697",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x324CF97D4373ef009FDF2F1afFc58406C86899Af",
    "contractAddress": "0xfDeB38347018bEfac74bC7470d55D7d5e05B8FCe",
    "transactionIndex": 0,
    "gasUsed": "1442889",
    "logsBloom": "0x
    "blockHash": "0xe6bb4c2cf9fe6d01001dec3b56cc96203200d3bbd071d60bc4560653864e70b9",
    "transactionHash": "0xfb5f38840d0f6571c6a98316411a039ad997f01af4059eb06f751c6171fc5697",
    "logs": [],
    "blockNumber": 21061938,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68EC9556830AD097D661Df2557FBCeC166a0A075",
    ""
  ],
  "numDeployments": 5,
  "solcInputHash": "b757d53c09807b1d293697e176c20d62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"knowledgeBaseCID\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chatId\",\"type\":\"uint256\"}],\"name\":\"ChatCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"OracleAddressUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RunSalesmanNPC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"addMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chatRuns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"messagesCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chatId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryContents\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chatId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryRoles\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"knowledgeBase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"documents\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"onOracleKnowledgeBaseQueryResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"onOracleLlmResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"startChat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SalesmanAgent.sol\":\"SalesmanAgent\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/SalesmanAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\n// @title SalesmanAgent\\n// @notice This contract handles chat interactions and integrates with teeML oracle for LLM and knowledge base queries.\\ncontract SalesmanAgent {\\n\\n    struct Message {\\n        string role;\\n        string content;\\n    }\\n\\n    struct ChatRun {\\n        address owner;\\n        Message[] messages;\\n        uint messagesCount;\\n    }\\n\\n    // @notice Mapping from chat ID to ChatRun\\n    mapping(uint => ChatRun) public chatRuns;\\n    uint private chatRunsCount;\\n\\n    // @notice Event emitted when a new chat is created\\n    event ChatCreated(address indexed owner, uint indexed chatId);\\n\\n    // @notice Address of the contract owner\\n    address private owner;\\n    \\n    // @notice Address of the oracle contract\\n    address public oracleAddress;\\n    \\n    // @notice CID of the knowledge base\\n    string public knowledgeBase;\\n\\n    // @notice Event emitted when the oracle address is updated\\n    event OracleAddressUpdated(address indexed newOracleAddress);\\n\\n    // @param initialOracleAddress Initial address of the oracle contract\\n    // @param knowledgeBaseCID CID of the initial knowledge base\\n    constructor(address initialOracleAddress, string memory knowledgeBaseCID) {\\n        owner = msg.sender;\\n        oracleAddress = initialOracleAddress;\\n        knowledgeBase = knowledgeBaseCID;\\n    }\\n\\n    // @notice Ensures the caller is the contract owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    // @notice Ensures the caller is the oracle contract\\n    modifier onlyOracle() {\\n        require(msg.sender == oracleAddress, \\\"Caller is not oracle\\\");\\n        _;\\n    }\\n\\n    // @notice Sets a new oracle address\\n    // @param newOracleAddress The new oracle address\\n    function setOracleAddress(address newOracleAddress) public onlyOwner {\\n        oracleAddress = newOracleAddress;\\n        emit OracleAddressUpdated(newOracleAddress);\\n    }\\n\\n    function RunSalesmanNPC(\\n\\t\\t\\n    ) public returns (uint i) {\\n      string memory query = \\\"You are a NPC character in a game. \\\\n You were a witness to a murder but are reluctant to discuss it or say what you saw. \\\\n Task: \\\\n You will act like the NPC character AT ALL TIMES. You are a fast talking car salesman that wasn't involved. You are willing to talk but are also trying to sell me a car. \\\\n You don't have any real info to give me. You are in love with convertables.\\\\n You are always very excited.\\\";\\n\\n      return startChat(query);\\n    }\\n\\n\\n    // @notice Starts a new chat\\n    // @param message The initial message to start the chat with\\n    // @return The ID of the newly created chat\\n    function startChat(string memory message) public returns (uint) {\\n        ChatRun storage run = chatRuns[chatRunsCount];\\n\\n        run.owner = msg.sender;\\n        Message memory newMessage;\\n        newMessage.content = message;\\n        newMessage.role = \\\"user\\\";\\n        run.messages.push(newMessage);\\n        run.messagesCount = 1;\\n\\n        uint currentId = chatRunsCount;\\n        chatRunsCount++;\\n\\n        // If there is a knowledge base, create a knowledge base query\\n        if (bytes(knowledgeBase).length > 0) {\\n            IOracle(oracleAddress).createKnowledgeBaseQuery(\\n                currentId,\\n                knowledgeBase,\\n                message,\\n                3\\n            );\\n        } else {\\n            // Otherwise, create an LLM call\\n            IOracle(oracleAddress).createLlmCall(currentId);\\n        }\\n        emit ChatCreated(msg.sender, currentId);\\n\\n        return currentId;\\n    }\\n\\n    // @notice Handles the response from the oracle for an LLM call\\n    // @param runId The ID of the chat run\\n    // @param response The response from the oracle\\n    // @dev Called by teeML oracle\\n    function onOracleLlmResponse(\\n        uint runId,\\n        string memory response,\\n        string memory /*errorMessage*/\\n    ) public onlyOracle {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            keccak256(abi.encodePacked(run.messages[run.messagesCount - 1].role)) == keccak256(abi.encodePacked(\\\"user\\\")),\\n            \\\"No message to respond to\\\"\\n        );\\n\\n        Message memory newMessage;\\n        newMessage.content = response;\\n        newMessage.role = \\\"assistant\\\";\\n        run.messages.push(newMessage);\\n        run.messagesCount++;\\n    }\\n\\n    // @notice Handles the response from the oracle for a knowledge base query\\n    // @param runId The ID of the chat run\\n    // @param documents The array of retrieved documents\\n    // @dev Called by teeML oracle\\n    function onOracleKnowledgeBaseQueryResponse(\\n        uint runId,\\n        string[] memory documents,\\n        string memory /*errorMessage*/\\n    ) public onlyOracle {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            keccak256(abi.encodePacked(run.messages[run.messagesCount - 1].role)) == keccak256(abi.encodePacked(\\\"user\\\")),\\n            \\\"No message to add context to\\\"\\n        );\\n        // Retrieve the last user message\\n        Message storage lastMessage = run.messages[run.messagesCount - 1];\\n\\n        // Start with the original message content\\n        string memory newContent = lastMessage.content;\\n\\n        // Append \\\"Relevant context:\\\\n\\\" only if there are documents\\n        if (documents.length > 0) {\\n            newContent = string(abi.encodePacked(newContent, \\\"\\\\n\\\\nRelevant context:\\\\n\\\"));\\n        }\\n\\n        // Iterate through the documents and append each to the newContent\\n        for (uint i = 0; i < documents.length; i++) {\\n            newContent = string(abi.encodePacked(newContent, documents[i], \\\"\\\\n\\\"));\\n        }\\n\\n        // Finally, set the lastMessage content to the newly constructed string\\n        lastMessage.content = newContent;\\n\\n        // Call LLM\\n        IOracle(oracleAddress).createLlmCall(runId);\\n    }\\n\\n    // @notice Adds a new message to an existing chat run\\n    // @param message The new message to add\\n    // @param runId The ID of the chat run\\n    function addMessage(string memory message, uint runId) public {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            keccak256(abi.encodePacked(run.messages[run.messagesCount - 1].role)) == keccak256(abi.encodePacked(\\\"assistant\\\")),\\n            \\\"No response to previous message\\\"\\n        );\\n        require(\\n            run.owner == msg.sender, \\\"Only chat owner can add messages\\\"\\n        );\\n\\n        Message memory newMessage;\\n        newMessage.content = message;\\n        newMessage.role = \\\"user\\\";\\n        run.messages.push(newMessage);\\n        run.messagesCount++;\\n        // If there is a knowledge base, create a knowledge base query\\n        if (bytes(knowledgeBase).length > 0) {\\n            IOracle(oracleAddress).createKnowledgeBaseQuery(\\n                runId,\\n                knowledgeBase,\\n                message,\\n                3\\n            );\\n        } else {\\n            // Otherwise, create an LLM call\\n            IOracle(oracleAddress).createLlmCall(runId);\\n        }\\n    }\\n\\n    // @notice Retrieves the message history contents of a chat run\\n    // @param chatId The ID of the chat run\\n    // @return An array of message contents\\n    // @dev Called by teeML oracle\\n    function getMessageHistoryContents(uint chatId) public view returns (string[] memory) {\\n        string[] memory messages = new string[](chatRuns[chatId].messages.length);\\n        for (uint i = 0; i < chatRuns[chatId].messages.length; i++) {\\n            messages[i] = chatRuns[chatId].messages[i].content;\\n        }\\n        return messages;\\n    }\\n\\n    // @notice Retrieves the roles of the messages in a chat run\\n    // @param chatId The ID of the chat run\\n    // @return An array of message roles\\n    // @dev Called by teeML oracle\\n    function getMessageHistoryRoles(uint chatId) public view returns (string[] memory) {\\n        string[] memory roles = new string[](chatRuns[chatId].messages.length);\\n        for (uint i = 0; i < chatRuns[chatId].messages.length; i++) {\\n            roles[i] = chatRuns[chatId].messages[i].role;\\n        }\\n        return roles;\\n    }\\n}\",\"keccak256\":\"0x475dad70b3e36c30adef488ea7674b9e2cebb3e58806d69521d9816e5321ef7e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IOracle {\\n\\n    struct Content {\\n        string contentType;\\n        string value;\\n    }\\n\\n    struct Message {\\n        string role;\\n        Content [] content;\\n    }\\n\\n    struct OpenAiRequest {\\n        // \\\"gpt-4-turbo\\\", \\\"gpt-4-turbo-preview\\\" or \\\"gpt-3.5-turbo-1106\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        // JSON list for tools in OpenAI format, empty for null, names have to match the supported tools\\n        string tools;\\n        // \\\"none\\\", \\\"auto\\\" or empty str which defaults to auto on OpenAI side\\n        string toolChoice;\\n        string user;\\n    }\\n\\n    struct OpenAiResponse {\\n        string id;\\n\\n        // either content is an empty srt or functionName and functionArguments\\n        string content;\\n        string functionName;\\n        string functionArguments;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct GroqRequest {\\n        // \\\"llama3-8b-8192\\\", \\\"llama3-70b-8192\\\", \\\"mixtral-8x7b-32768\\\" or \\\"gemma-7b-it\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        string user;\\n    }\\n\\n    struct GroqResponse {\\n        string id;\\n\\n        string content;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct KnowledgeBaseQueryRequest {\\n        string cid;\\n        string query;\\n        uint32 num_documents;\\n    }\\n\\n    function createLlmCall(\\n        uint promptId\\n    ) external returns (uint);\\n\\n    function createGroqLlmCall(\\n        uint promptId,\\n        GroqRequest memory request\\n    ) external returns (uint);\\n\\n    function createOpenAiLlmCall(\\n        uint promptId,\\n        OpenAiRequest memory request\\n    ) external returns (uint);\\n\\n    function createFunctionCall(\\n        uint functionCallbackId,\\n        string memory functionType,\\n        string memory functionInput\\n    ) external returns (uint i);\\n\\n    function createKnowledgeBaseQuery(\\n        uint kbQueryCallbackId,\\n        string memory cid,\\n        string memory query,\\n        uint32 num_documents\\n    ) external returns (uint i);\\n}\",\"keccak256\":\"0xadf297ae3315255b8df039ffbd9fd4ea11f01d4d109c49d8ec765ae9b0cb578d\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234620002475762001a8a803803806200001d816200024c565b928339810190604081830312620002475780516001600160a01b038116919082900362000247576020818101516001600160401b039283821162000247570192601f90858286011215620002475784518481116200021c57601f19956200008a828501881686016200024c565b978289528583830101116200024757849060005b838110620002325750506000918801015260018060a01b031933816002541617600255600354161760035584519283116200021c576004948554926001938481811c9116801562000211575b82821014620001fc57838111620001b1575b5080928511600114620001485750839450908392916000946200013c575b50501b916000199060031b1c19161790555b6040516118179081620002738239f35b0151925038806200011a565b9294849081168760005284600020946000905b888383106200019657505050106200017c575b505050811b0190556200012c565b015160001960f88460031b161c191690553880806200016e565b8587015188559096019594850194879350908101906200015b565b87600052816000208480880160051c820192848910620001f2575b0160051c019085905b828110620001e5575050620000fc565b60008155018590620001d5565b92508192620001cc565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000ea565b634e487b7160e01b600052604160045260246000fd5b8181018301518a82018401528692016200009e565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200021c5760405256fe60406080815260048036101561001457600080fd5b600091823560e01c80632843d13514610add5780632d08d82a14610aa05780634c69c00f146109f9578063632cc98b146109c0578063941fac37146106bb578063a1b67ed114610545578063a89ae4ba1461051c578063e57d0e97146102ce578063eb17429a14610235578063ed6e39e5146101855763f997cc251461009957600080fd5b34610181578260031936011261018157805191838154906100b982611088565b8086529260019280841690811561015657506001146100fa575b6100f686866100e4828b0383610f48565b51918291602083526020830190611001565b0390f35b815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82861061013e575050506100e48260206100f69582010194386100d3565b80546020878701810191909152909501948101610120565b90506100f69750869350602092506100e494915060ff191682840152151560051b82010194386100d3565b8280fd5b503461018157602091826003193601126102315735928381528083526001906101b2828483200154611797565b9381835b6101c8575b8451806100f68882611026565b86835282825283858420015481101561022c5790610224826102026102096101f68796898b819a20016111a2565b508951928380926110c2565b0382610f48565b610213828a611783565b5261021e8189611783565b50611435565b9091926101b6565b6101bb565b8380fd5b5091346102cb57602091826003193601126102c7579190913591828152808252600191610266838684200154611797565b9382845b61027c575b8651806100f68882611026565b8184528383528487852001548110156102c257906102b982866102096102a9889796838d819b20016111a2565b506102028c5180948193016110c2565b9091929361026a565b61026f565b5080fd5b80fd5b5082346102cb57806003193601126102cb578151906101c082019082821067ffffffffffffffff831117610509576020846105028585835261019881527f596f75206172652061204e50432063686172616374657220696e20612067616d848201527f652e200a20596f7520776572652061207769746e65737320746f2061206d7572838201527f64657220627574206172652072656c756374616e7420746f206469736375737360608201527f206974206f7220736179207768617420796f75207361772e200a205461736b3a60808201527f200a20596f752077696c6c20616374206c696b6520746865204e50432063686160a08201527f72616374657220415420414c4c2054494d45532e20596f75206172652061206660c08201527f6173742074616c6b696e67206361722073616c65736d616e207468617420776160e08201527f736e277420696e766f6c7665642e20596f75206172652077696c6c696e6720746101008201527f6f2074616c6b206275742061726520616c736f20747279696e6720746f2073656101208201527f6c6c206d652061206361722e200a20596f7520646f6e2774206861766520616e6101408201527f79207265616c20696e666f20746f2067697665206d652e20596f7520617265206101608201527f696e206c6f7665207769746820636f6e7665727461626c65732e0a20596f75206101808201527f61726520616c77617973207665727920657863697465642e00000000000000006101a082015261145a565b9051908152f35b634e487b7160e01b815260418552602490fd5b8382346102c757816003193601126102c75760035490516001600160a01b039091168152602090f35b509190346102c75760603660031901126102c75767ffffffffffffffff602435818111610231576105799036908401610f82565b90604435908111610231576105919036908401610f82565b506105a760018060a01b036003541633146116be565b81358352602083815284842090600260018301920193845460001981019081116106a8576105d590846111a2565b5087516105f7816105e98682018095611701565b03601f198101835282610f48565b519020875183810190633ab9b2b960e11b825283815261061681610f16565b51902003610667575068185cdcda5cdd185b9d60ba1b61065894959661063a611158565b9483860152519161064a83610f16565b6009835282015282526111d4565b6106628154611435565b905580f35b60649187519162461bcd60e51b8352820152601860248201527f4e6f206d65737361676520746f20726573706f6e6420746f00000000000000006044820152fd5b634e487b7160e01b875260118252602487fd5b5090346101815760031991808336011261023157813567ffffffffffffffff81116109bc576106ed9036908401610f82565b92602492833591828752602095878752848820916001928381016002820190815460001981019081116109aa5761072490826111a2565b506105e961073a8d8c5192839182018095611701565b51902089518c81019068185cdcda5cdd185b9d60ba1b82526009815261075f81610f16565b519020036109685791546001600160a01b0392908316330361092857918a97969593916107a58d9694610790611158565b90868c83015261079e611182565b82526111d4565b6107af8154611435565b90556107bb8654611088565b156108f3576003541694608089519a8b9863a252a95160e01b8a52838a015288015284938154916107eb83611088565b928360848b01528983821691826000146108cb57505060011461086e575b50505082869493926108249286809503016044850152611001565b6003606483015203925af1908115610865575061084057505080f35b813d831161085e575b6108538183610f48565b810103126102cb5780f35b503d610849565b513d85823e3d90fd5b865291935084917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106108af57505050850160a40191808287610809565b805460a4858e0101528c998c99508e9750909301928101610897565b60ff191660a48083019190915294151560051b81019094019650849386935091506108099050565b935050505060039591955416948785519687948593636c4e899160e11b85528401525af1908115610865575061084057505080f35b6064878c8c818d519362461bcd60e51b85528401528201527f4f6e6c792063686174206f776e65722063616e20616464206d657373616765736044820152fd5b885162461bcd60e51b81528088018c9052601f818c01527f4e6f20726573706f6e736520746f2070726576696f7573206d657373616765006044820152606490fd5b634e487b7160e01b8d52601188528a8dfd5b8480fd5b509034610181576020366003190112610181579181923581528060205220600260018060a01b0382541691015482519182526020820152f35b5090346101815760203660031901126101815780356001600160a01b0381811693918490036109bc57600254163303610a67575050600380546001600160a01b031916821790557f107a9fafffb7ac890f780879e423760c9ffea8dcee8045681f40f542aede2cb88280a280f35b906020606492519162461bcd60e51b8352820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b6044820152fd5b5082346102cb5760203660031901126102cb5782359067ffffffffffffffff82116102cb5750610ad860209361050292369101610f82565b61145a565b509190346102c75760603660031901126102c75780359060249384359267ffffffffffffffff95868511610f125736602386011215610f12578484013594610b2486610f6a565b90610b3185519283610f48565b868252602096838884019160051b83010191368311610f0e57848101915b838310610ee45750505050604435888111610ee057610b719036908701610f82565b506003546001600160a01b039190610b8c90831633146116be565b838852878752848820600281015460019a9160001991828101918d01908211610ece579081610bbe82610bce946111a2565b508c8b5194859182018093611701565b0393610be2601f1995868101835282610f48565b5190208a518d810190633ab9b2b960e11b82528d8152610c0181610f16565b51902003610e8c578d91610c14916111a2565b5001938c895191610c3083610c29818a6110c2565b0384610f48565b8c838251610e36575b50908b8f928493945b610db3575b50505050508051938411610da157610c5f8554611088565b601f8111610d59575b508a91601f8511600114610cf757508b9c84939284928d9e9d9b9c9d95610cec575b50501b9260031b1c19161790555b60035416948785519687948593636c4e899160e11b85528401525af19081156108655750610cc4578280f35b813d8311610ce5575b610cd78183610f48565b810103126102cb5738808280f35b503d610ccd565b015193503880610c8a565b8493919d941691858d528b8d20928d5b818110610d4457509d848d9e9f9d9b9c9d10610d2c575b50505050811b019055610c98565b01519060f88460031b161c1916905538808080610d1e565b8f830151855593860193918d01918d01610d07565b858d528b8d20601f860160051c8101918d8710610d97575b601f0160051c01908e908e5b838210610d8c57505050610c68565b8155018e908e610d7d565b9091508190610d71565b634e487b7160e01b8c5260418a52868cfd5b82939495919251861015610e2a576021610e209392610e1a92610dd68988611783565b5194519482610dee8794518092858088019101610fde565b8301610e0282518093858085019101610fde565b600560f91b9101918201520386810184520182610f48565b93611435565b91908b8e83610c42565b82919550849350610c47565b610e84919294506034908d519381610e578693518092848087019101610fde565b8201907305052932b632bb30b73a1031b7b73a32bc3a1d0560611b90820152036014810184520182610f48565b918c38610c39565b895162461bcd60e51b8152808c018d9052601c818a01527f4e6f206d65737361676520746f2061646420636f6e7465787420746f000000006044820152606490fd5b634e487b7160e01b8c5260118a52868cfd5b8780fd5b82358c8111610f0a578a91610eff8392893691870101610f82565b815201920191610b4f565b8b80fd5b8980fd5b8580fd5b6040810190811067ffffffffffffffff821117610f3257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610f3257604052565b67ffffffffffffffff8111610f325760051b60200190565b81601f82011215610fd95780359067ffffffffffffffff8211610f325760405192610fb7601f8401601f191660200185610f48565b82845260208383010111610fd957816000926020809301838601378301015290565b600080fd5b60005b838110610ff15750506000910152565b8181015183820152602001610fe1565b9060209161101a81518092818552858086019101610fde565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b84831061105a5750505050505090565b9091929394958480611078600193603f198682030187528a51611001565b980193019301919493929061104a565b90600182811c921680156110b8575b60208310146110a257565b634e487b7160e01b600052602260045260246000fd5b91607f1691611097565b90600092918054916110d383611088565b91828252600193848116908160001461113557506001146110f5575b50505050565b90919394506000526020928360002092846000945b8386106111215750505050010190388080806110ef565b80548587018301529401938590820161110a565b9294505050602093945060ff191683830152151560051b010190388080806110ef565b604051906040820182811067ffffffffffffffff821117610f325760405260606020838281520152565b6040519061118f82610f16565b60048252633ab9b2b960e11b6020830152565b80548210156111be5760005260206000209060011b0190600090565b634e487b7160e01b600052603260045260246000fd5b805468010000000000000000811015610f32576111f89060019283820181556111a2565b61141f57825180519167ffffffffffffffff92838111610f3257849061121e8354611088565b93601f948581116113ce575b506020908583116001146113655760209492916000918361135a575b5050600019600383901b1c191690831b1781555b019401518051928311610f32576112718554611088565b828111611312575b5060209183116001146112b2579282939183926000946112a7575b50501b916000199060031b1c1916179055565b015192503880611294565b90601f198316918560005283826000209360005b878282106112f9575050106112e0575b505050811b019055565b015160001960f88460031b161c191690553880806112d6565b84860151875590950194602094850194879350016112c6565b8560005260206000208380860160051c82019260208710611351575b0160051c019085905b828110611345575050611279565b60008155018590611337565b9250819261132e565b015190503880611246565b90601f1983169185600052816000209260005b8181106113b65750918593918560209896941061139d575b505050811b01815561125a565b015160001960f88460031b161c19169055388080611390565b8284015185558a969094019360209384019301611378565b909192506000848152602081208680860160051c82019360208710611416575b908a9695949392910160051c01915b82811061140b57505061122a565b8181558995016113fd565b935081936113ee565b634e487b7160e01b600052600060045260246000fd5b60001981146114445760010190565b634e487b7160e01b600052601160045260246000fd5b9060019182546000908152602081815284600260408420336bffffffffffffffffffffffff60a01b8254161781556114aa611493611158565b87868201526114a0611182565b81528483016111d4565b01558454926114b884611435565b86556114c5600454611088565b156116495760035460405163a252a95160e01b8152600480820187905260806024830152549097849389936001600160a01b03169287928392919061150982611088565b918260848901528782821691826000146116225750506001146115c1575b50506115428593928492600319848303016044850152611001565b6003606483015203925af19485156115b657839495611587575b50505b7fd1de2c4de50323207202f3df0bb1dec1a42e233aec245f25519d674c10bd72ca339180a390565b90809293503d83116115af575b61159e8183610f48565b810103126102cb578190388061155c565b503d611594565b6040513d84823e3d90fd5b6004855291925083917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061160557505050840160a4019061154285611527565b805497840160a4019790975288978d978b965093019281016115ec565b60ff191660a48083019190915293151560051b810190930194506115429291506115279050565b50600354604051636c4e899160e11b815260048101859052955081908690602490829086906001600160a01b03165af19485156115b65783949561168f575b505061155f565b90809293503d83116116b7575b6116a68183610f48565b810103126102cb5781903880611688565b503d61169c565b156116c557565b60405162461bcd60e51b815260206004820152601460248201527343616c6c6572206973206e6f74206f7261636c6560601b6044820152606490fd5b60009291815461171081611088565b92600191808316908115611768575060011461172c5750505050565b90919293945060005260209081600020906000915b85831061175757505050500190388080806110ef565b805485840152918301918101611741565b60ff19168452505050811515909102019150388080806110ef565b80518210156111be5760209160051b010190565b906117a182610f6a565b6117ae6040519182610f48565b82815280926117bf601f1991610f6a565b019060005b8281106117d057505050565b8060606020809385010152016117c456fea2646970667358221220e9f597209212096b3de7cb92edb1fad124736e347d85cb27c696904e3e1fa1d464736f6c63430008110033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c80632843d13514610add5780632d08d82a14610aa05780634c69c00f146109f9578063632cc98b146109c0578063941fac37146106bb578063a1b67ed114610545578063a89ae4ba1461051c578063e57d0e97146102ce578063eb17429a14610235578063ed6e39e5146101855763f997cc251461009957600080fd5b34610181578260031936011261018157805191838154906100b982611088565b8086529260019280841690811561015657506001146100fa575b6100f686866100e4828b0383610f48565b51918291602083526020830190611001565b0390f35b815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82861061013e575050506100e48260206100f69582010194386100d3565b80546020878701810191909152909501948101610120565b90506100f69750869350602092506100e494915060ff191682840152151560051b82010194386100d3565b8280fd5b503461018157602091826003193601126102315735928381528083526001906101b2828483200154611797565b9381835b6101c8575b8451806100f68882611026565b86835282825283858420015481101561022c5790610224826102026102096101f68796898b819a20016111a2565b508951928380926110c2565b0382610f48565b610213828a611783565b5261021e8189611783565b50611435565b9091926101b6565b6101bb565b8380fd5b5091346102cb57602091826003193601126102c7579190913591828152808252600191610266838684200154611797565b9382845b61027c575b8651806100f68882611026565b8184528383528487852001548110156102c257906102b982866102096102a9889796838d819b20016111a2565b506102028c5180948193016110c2565b9091929361026a565b61026f565b5080fd5b80fd5b5082346102cb57806003193601126102cb578151906101c082019082821067ffffffffffffffff831117610509576020846105028585835261019881527f596f75206172652061204e50432063686172616374657220696e20612067616d848201527f652e200a20596f7520776572652061207769746e65737320746f2061206d7572838201527f64657220627574206172652072656c756374616e7420746f206469736375737360608201527f206974206f7220736179207768617420796f75207361772e200a205461736b3a60808201527f200a20596f752077696c6c20616374206c696b6520746865204e50432063686160a08201527f72616374657220415420414c4c2054494d45532e20596f75206172652061206660c08201527f6173742074616c6b696e67206361722073616c65736d616e207468617420776160e08201527f736e277420696e766f6c7665642e20596f75206172652077696c6c696e6720746101008201527f6f2074616c6b206275742061726520616c736f20747279696e6720746f2073656101208201527f6c6c206d652061206361722e200a20596f7520646f6e2774206861766520616e6101408201527f79207265616c20696e666f20746f2067697665206d652e20596f7520617265206101608201527f696e206c6f7665207769746820636f6e7665727461626c65732e0a20596f75206101808201527f61726520616c77617973207665727920657863697465642e00000000000000006101a082015261145a565b9051908152f35b634e487b7160e01b815260418552602490fd5b8382346102c757816003193601126102c75760035490516001600160a01b039091168152602090f35b509190346102c75760603660031901126102c75767ffffffffffffffff602435818111610231576105799036908401610f82565b90604435908111610231576105919036908401610f82565b506105a760018060a01b036003541633146116be565b81358352602083815284842090600260018301920193845460001981019081116106a8576105d590846111a2565b5087516105f7816105e98682018095611701565b03601f198101835282610f48565b519020875183810190633ab9b2b960e11b825283815261061681610f16565b51902003610667575068185cdcda5cdd185b9d60ba1b61065894959661063a611158565b9483860152519161064a83610f16565b6009835282015282526111d4565b6106628154611435565b905580f35b60649187519162461bcd60e51b8352820152601860248201527f4e6f206d65737361676520746f20726573706f6e6420746f00000000000000006044820152fd5b634e487b7160e01b875260118252602487fd5b5090346101815760031991808336011261023157813567ffffffffffffffff81116109bc576106ed9036908401610f82565b92602492833591828752602095878752848820916001928381016002820190815460001981019081116109aa5761072490826111a2565b506105e961073a8d8c5192839182018095611701565b51902089518c81019068185cdcda5cdd185b9d60ba1b82526009815261075f81610f16565b519020036109685791546001600160a01b0392908316330361092857918a97969593916107a58d9694610790611158565b90868c83015261079e611182565b82526111d4565b6107af8154611435565b90556107bb8654611088565b156108f3576003541694608089519a8b9863a252a95160e01b8a52838a015288015284938154916107eb83611088565b928360848b01528983821691826000146108cb57505060011461086e575b50505082869493926108249286809503016044850152611001565b6003606483015203925af1908115610865575061084057505080f35b813d831161085e575b6108538183610f48565b810103126102cb5780f35b503d610849565b513d85823e3d90fd5b865291935084917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106108af57505050850160a40191808287610809565b805460a4858e0101528c998c99508e9750909301928101610897565b60ff191660a48083019190915294151560051b81019094019650849386935091506108099050565b935050505060039591955416948785519687948593636c4e899160e11b85528401525af1908115610865575061084057505080f35b6064878c8c818d519362461bcd60e51b85528401528201527f4f6e6c792063686174206f776e65722063616e20616464206d657373616765736044820152fd5b885162461bcd60e51b81528088018c9052601f818c01527f4e6f20726573706f6e736520746f2070726576696f7573206d657373616765006044820152606490fd5b634e487b7160e01b8d52601188528a8dfd5b8480fd5b509034610181576020366003190112610181579181923581528060205220600260018060a01b0382541691015482519182526020820152f35b5090346101815760203660031901126101815780356001600160a01b0381811693918490036109bc57600254163303610a67575050600380546001600160a01b031916821790557f107a9fafffb7ac890f780879e423760c9ffea8dcee8045681f40f542aede2cb88280a280f35b906020606492519162461bcd60e51b8352820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b6044820152fd5b5082346102cb5760203660031901126102cb5782359067ffffffffffffffff82116102cb5750610ad860209361050292369101610f82565b61145a565b509190346102c75760603660031901126102c75780359060249384359267ffffffffffffffff95868511610f125736602386011215610f12578484013594610b2486610f6a565b90610b3185519283610f48565b868252602096838884019160051b83010191368311610f0e57848101915b838310610ee45750505050604435888111610ee057610b719036908701610f82565b506003546001600160a01b039190610b8c90831633146116be565b838852878752848820600281015460019a9160001991828101918d01908211610ece579081610bbe82610bce946111a2565b508c8b5194859182018093611701565b0393610be2601f1995868101835282610f48565b5190208a518d810190633ab9b2b960e11b82528d8152610c0181610f16565b51902003610e8c578d91610c14916111a2565b5001938c895191610c3083610c29818a6110c2565b0384610f48565b8c838251610e36575b50908b8f928493945b610db3575b50505050508051938411610da157610c5f8554611088565b601f8111610d59575b508a91601f8511600114610cf757508b9c84939284928d9e9d9b9c9d95610cec575b50501b9260031b1c19161790555b60035416948785519687948593636c4e899160e11b85528401525af19081156108655750610cc4578280f35b813d8311610ce5575b610cd78183610f48565b810103126102cb5738808280f35b503d610ccd565b015193503880610c8a565b8493919d941691858d528b8d20928d5b818110610d4457509d848d9e9f9d9b9c9d10610d2c575b50505050811b019055610c98565b01519060f88460031b161c1916905538808080610d1e565b8f830151855593860193918d01918d01610d07565b858d528b8d20601f860160051c8101918d8710610d97575b601f0160051c01908e908e5b838210610d8c57505050610c68565b8155018e908e610d7d565b9091508190610d71565b634e487b7160e01b8c5260418a52868cfd5b82939495919251861015610e2a576021610e209392610e1a92610dd68988611783565b5194519482610dee8794518092858088019101610fde565b8301610e0282518093858085019101610fde565b600560f91b9101918201520386810184520182610f48565b93611435565b91908b8e83610c42565b82919550849350610c47565b610e84919294506034908d519381610e578693518092848087019101610fde565b8201907305052932b632bb30b73a1031b7b73a32bc3a1d0560611b90820152036014810184520182610f48565b918c38610c39565b895162461bcd60e51b8152808c018d9052601c818a01527f4e6f206d65737361676520746f2061646420636f6e7465787420746f000000006044820152606490fd5b634e487b7160e01b8c5260118a52868cfd5b8780fd5b82358c8111610f0a578a91610eff8392893691870101610f82565b815201920191610b4f565b8b80fd5b8980fd5b8580fd5b6040810190811067ffffffffffffffff821117610f3257604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610f3257604052565b67ffffffffffffffff8111610f325760051b60200190565b81601f82011215610fd95780359067ffffffffffffffff8211610f325760405192610fb7601f8401601f191660200185610f48565b82845260208383010111610fd957816000926020809301838601378301015290565b600080fd5b60005b838110610ff15750506000910152565b8181015183820152602001610fe1565b9060209161101a81518092818552858086019101610fde565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b84831061105a5750505050505090565b9091929394958480611078600193603f198682030187528a51611001565b980193019301919493929061104a565b90600182811c921680156110b8575b60208310146110a257565b634e487b7160e01b600052602260045260246000fd5b91607f1691611097565b90600092918054916110d383611088565b91828252600193848116908160001461113557506001146110f5575b50505050565b90919394506000526020928360002092846000945b8386106111215750505050010190388080806110ef565b80548587018301529401938590820161110a565b9294505050602093945060ff191683830152151560051b010190388080806110ef565b604051906040820182811067ffffffffffffffff821117610f325760405260606020838281520152565b6040519061118f82610f16565b60048252633ab9b2b960e11b6020830152565b80548210156111be5760005260206000209060011b0190600090565b634e487b7160e01b600052603260045260246000fd5b805468010000000000000000811015610f32576111f89060019283820181556111a2565b61141f57825180519167ffffffffffffffff92838111610f3257849061121e8354611088565b93601f948581116113ce575b506020908583116001146113655760209492916000918361135a575b5050600019600383901b1c191690831b1781555b019401518051928311610f32576112718554611088565b828111611312575b5060209183116001146112b2579282939183926000946112a7575b50501b916000199060031b1c1916179055565b015192503880611294565b90601f198316918560005283826000209360005b878282106112f9575050106112e0575b505050811b019055565b015160001960f88460031b161c191690553880806112d6565b84860151875590950194602094850194879350016112c6565b8560005260206000208380860160051c82019260208710611351575b0160051c019085905b828110611345575050611279565b60008155018590611337565b9250819261132e565b015190503880611246565b90601f1983169185600052816000209260005b8181106113b65750918593918560209896941061139d575b505050811b01815561125a565b015160001960f88460031b161c19169055388080611390565b8284015185558a969094019360209384019301611378565b909192506000848152602081208680860160051c82019360208710611416575b908a9695949392910160051c01915b82811061140b57505061122a565b8181558995016113fd565b935081936113ee565b634e487b7160e01b600052600060045260246000fd5b60001981146114445760010190565b634e487b7160e01b600052601160045260246000fd5b9060019182546000908152602081815284600260408420336bffffffffffffffffffffffff60a01b8254161781556114aa611493611158565b87868201526114a0611182565b81528483016111d4565b01558454926114b884611435565b86556114c5600454611088565b156116495760035460405163a252a95160e01b8152600480820187905260806024830152549097849389936001600160a01b03169287928392919061150982611088565b918260848901528782821691826000146116225750506001146115c1575b50506115428593928492600319848303016044850152611001565b6003606483015203925af19485156115b657839495611587575b50505b7fd1de2c4de50323207202f3df0bb1dec1a42e233aec245f25519d674c10bd72ca339180a390565b90809293503d83116115af575b61159e8183610f48565b810103126102cb578190388061155c565b503d611594565b6040513d84823e3d90fd5b6004855291925083917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061160557505050840160a4019061154285611527565b805497840160a4019790975288978d978b965093019281016115ec565b60ff191660a48083019190915293151560051b810190930194506115429291506115279050565b50600354604051636c4e899160e11b815260048101859052955081908690602490829086906001600160a01b03165af19485156115b65783949561168f575b505061155f565b90809293503d83116116b7575b6116a68183610f48565b810103126102cb5781903880611688565b503d61169c565b156116c557565b60405162461bcd60e51b815260206004820152601460248201527343616c6c6572206973206e6f74206f7261636c6560601b6044820152606490fd5b60009291815461171081611088565b92600191808316908115611768575060011461172c5750505050565b90919293945060005260209081600020906000915b85831061175757505050500190388080806110ef565b805485840152918301918101611741565b60ff19168452505050811515909102019150388080806110ef565b80518210156111be5760209160051b010190565b906117a182610f6a565b6117ae6040519182610f48565b82815280926117bf601f1991610f6a565b019060005b8281106117d057505050565b8060606020809385010152016117c456fea2646970667358221220e9f597209212096b3de7cb92edb1fad124736e347d85cb27c696904e3e1fa1d464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 632,
        "contract": "contracts/SalesmanAgent.sol:SalesmanAgent",
        "label": "chatRuns",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(ChatRun)627_storage)"
      },
      {
        "astId": 634,
        "contract": "contracts/SalesmanAgent.sol:SalesmanAgent",
        "label": "chatRunsCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 642,
        "contract": "contracts/SalesmanAgent.sol:SalesmanAgent",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 644,
        "contract": "contracts/SalesmanAgent.sol:SalesmanAgent",
        "label": "oracleAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 646,
        "contract": "contracts/SalesmanAgent.sol:SalesmanAgent",
        "label": "knowledgeBase",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Message)618_storage)dyn_storage": {
        "base": "t_struct(Message)618_storage",
        "encoding": "dynamic_array",
        "label": "struct SalesmanAgent.Message[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(ChatRun)627_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct SalesmanAgent.ChatRun)",
        "numberOfBytes": "32",
        "value": "t_struct(ChatRun)627_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChatRun)627_storage": {
        "encoding": "inplace",
        "label": "struct SalesmanAgent.ChatRun",
        "members": [
          {
            "astId": 620,
            "contract": "contracts/SalesmanAgent.sol:SalesmanAgent",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 624,
            "contract": "contracts/SalesmanAgent.sol:SalesmanAgent",
            "label": "messages",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Message)618_storage)dyn_storage"
          },
          {
            "astId": 626,
            "contract": "contracts/SalesmanAgent.sol:SalesmanAgent",
            "label": "messagesCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Message)618_storage": {
        "encoding": "inplace",
        "label": "struct SalesmanAgent.Message",
        "members": [
          {
            "astId": 615,
            "contract": "contracts/SalesmanAgent.sol:SalesmanAgent",
            "label": "role",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 617,
            "contract": "contracts/SalesmanAgent.sol:SalesmanAgent",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}