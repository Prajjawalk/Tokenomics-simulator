{
  "address": "0xa910d0ECAA2f1a0D01A073A43353E944C3893E83",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOracleAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "knowledgeBaseCID",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "chatId",
          "type": "uint256"
        }
      ],
      "name": "ChatCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "OracleAddressUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "RunStubbornNPC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "addMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chatRuns",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "messagesCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chatId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryContents",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chatId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryRoles",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "knowledgeBase",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "documents",
          "type": "string[]"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "onOracleKnowledgeBaseQueryResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "response",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "onOracleLlmResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "startChat",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8d0d2cfbaa0efd4dd53a30bd5f7d7be61ad782ed7461b48c05c232e4cfa8ec9",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x324CF97D4373ef009FDF2F1afFc58406C86899Af",
    "contractAddress": "0xa910d0ECAA2f1a0D01A073A43353E944C3893E83",
    "transactionIndex": 0,
    "gasUsed": "1455495",
    "logsBloom": "0x
    "blockHash": "0x4fe718d03f21d74a1bd5addca7ad5f008207f555f34e908aa640d20ebb9948eb",
    "transactionHash": "0xe8d0d2cfbaa0efd4dd53a30bd5f7d7be61ad782ed7461b48c05c232e4cfa8ec9",
    "logs": [],
    "blockNumber": 21061929,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x68EC9556830AD097D661Df2557FBCeC166a0A075",
    ""
  ],
  "numDeployments": 5,
  "solcInputHash": "b757d53c09807b1d293697e176c20d62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"knowledgeBaseCID\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chatId\",\"type\":\"uint256\"}],\"name\":\"ChatCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"OracleAddressUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"RunStubbornNPC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"addMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chatRuns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"messagesCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chatId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryContents\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chatId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryRoles\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"knowledgeBase\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"documents\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"onOracleKnowledgeBaseQueryResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"onOracleLlmResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"startChat\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StubbornAgent.sol\":\"StubbornAgent\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/StubbornAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\n// @title StubbornAgent\\n// @notice This contract handles chat interactions and integrates with teeML oracle for LLM and knowledge base queries.\\ncontract StubbornAgent {\\n\\n    struct Message {\\n        string role;\\n        string content;\\n    }\\n\\n    struct ChatRun {\\n        address owner;\\n        Message[] messages;\\n        uint messagesCount;\\n    }\\n\\n    // @notice Mapping from chat ID to ChatRun\\n    mapping(uint => ChatRun) public chatRuns;\\n    uint private chatRunsCount;\\n\\n    // @notice Event emitted when a new chat is created\\n    event ChatCreated(address indexed owner, uint indexed chatId);\\n\\n    // @notice Address of the contract owner\\n    address private owner;\\n    \\n    // @notice Address of the oracle contract\\n    address public oracleAddress;\\n    \\n    // @notice CID of the knowledge base\\n    string public knowledgeBase;\\n\\n    // @notice Event emitted when the oracle address is updated\\n    event OracleAddressUpdated(address indexed newOracleAddress);\\n\\n    // @param initialOracleAddress Initial address of the oracle contract\\n    // @param knowledgeBaseCID CID of the initial knowledge base\\n    constructor(address initialOracleAddress, string memory knowledgeBaseCID) {\\n        owner = msg.sender;\\n        oracleAddress = initialOracleAddress;\\n        knowledgeBase = knowledgeBaseCID;\\n    }\\n\\n    // @notice Ensures the caller is the contract owner\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Caller is not owner\\\");\\n        _;\\n    }\\n\\n    // @notice Ensures the caller is the oracle contract\\n    modifier onlyOracle() {\\n        require(msg.sender == oracleAddress, \\\"Caller is not oracle\\\");\\n        _;\\n    }\\n\\n    // @notice Sets a new oracle address\\n    // @param newOracleAddress The new oracle address\\n    function setOracleAddress(address newOracleAddress) public onlyOwner {\\n        oracleAddress = newOracleAddress;\\n        emit OracleAddressUpdated(newOracleAddress);\\n    }\\n\\n    function RunStubbornNPC(\\n\\t\\t\\n    ) public returns (uint i) {\\n      string memory query = \\\"You are a NPC character in a game. You were a witness to a murder but are reluctant to discuss it or say what you saw. \\\\n Task: You will act like the NPC character AT ALL TIMES. \\\\n You will speak as an uneducated street person in olden times. \\\\n You are not willing to give up the information you have about the murder and will only do so under extreme pressure or for large amount of money. \\\\n You will not volunteer information easily. You don't want to talk.\\\";\\n\\n      return startChat(query);\\n    }\\n\\n\\n\\n\\n\\n    // @notice Starts a new chat\\n    // @param message The initial message to start the chat with\\n    // @return The ID of the newly created chat\\n    function startChat(string memory message) public returns (uint) {\\n        ChatRun storage run = chatRuns[chatRunsCount];\\n\\n        run.owner = msg.sender;\\n        Message memory newMessage;\\n        newMessage.content = message;\\n        newMessage.role = \\\"user\\\";\\n        run.messages.push(newMessage);\\n        run.messagesCount = 1;\\n\\n        uint currentId = chatRunsCount;\\n        chatRunsCount++;\\n\\n        // If there is a knowledge base, create a knowledge base query\\n        if (bytes(knowledgeBase).length > 0) {\\n            IOracle(oracleAddress).createKnowledgeBaseQuery(\\n                currentId,\\n                knowledgeBase,\\n                message,\\n                3\\n            );\\n        } else {\\n            // Otherwise, create an LLM call\\n            IOracle(oracleAddress).createLlmCall(currentId);\\n        }\\n        emit ChatCreated(msg.sender, currentId);\\n\\n        return currentId;\\n    }\\n\\n    // @notice Handles the response from the oracle for an LLM call\\n    // @param runId The ID of the chat run\\n    // @param response The response from the oracle\\n    // @dev Called by teeML oracle\\n    function onOracleLlmResponse(\\n        uint runId,\\n        string memory response,\\n        string memory /*errorMessage*/\\n    ) public onlyOracle {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            keccak256(abi.encodePacked(run.messages[run.messagesCount - 1].role)) == keccak256(abi.encodePacked(\\\"user\\\")),\\n            \\\"No message to respond to\\\"\\n        );\\n\\n        Message memory newMessage;\\n        newMessage.content = response;\\n        newMessage.role = \\\"assistant\\\";\\n        run.messages.push(newMessage);\\n        run.messagesCount++;\\n    }\\n\\n    // @notice Handles the response from the oracle for a knowledge base query\\n    // @param runId The ID of the chat run\\n    // @param documents The array of retrieved documents\\n    // @dev Called by teeML oracle\\n    function onOracleKnowledgeBaseQueryResponse(\\n        uint runId,\\n        string[] memory documents,\\n        string memory /*errorMessage*/\\n    ) public onlyOracle {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            keccak256(abi.encodePacked(run.messages[run.messagesCount - 1].role)) == keccak256(abi.encodePacked(\\\"user\\\")),\\n            \\\"No message to add context to\\\"\\n        );\\n        // Retrieve the last user message\\n        Message storage lastMessage = run.messages[run.messagesCount - 1];\\n\\n        // Start with the original message content\\n        string memory newContent = lastMessage.content;\\n\\n        // Append \\\"Relevant context:\\\\n\\\" only if there are documents\\n        if (documents.length > 0) {\\n            newContent = string(abi.encodePacked(newContent, \\\"\\\\n\\\\nRelevant context:\\\\n\\\"));\\n        }\\n\\n        // Iterate through the documents and append each to the newContent\\n        for (uint i = 0; i < documents.length; i++) {\\n            newContent = string(abi.encodePacked(newContent, documents[i], \\\"\\\\n\\\"));\\n        }\\n\\n        // Finally, set the lastMessage content to the newly constructed string\\n        lastMessage.content = newContent;\\n\\n        // Call LLM\\n        IOracle(oracleAddress).createLlmCall(runId);\\n    }\\n\\n    // @notice Adds a new message to an existing chat run\\n    // @param message The new message to add\\n    // @param runId The ID of the chat run\\n    function addMessage(string memory message, uint runId) public {\\n        ChatRun storage run = chatRuns[runId];\\n        require(\\n            keccak256(abi.encodePacked(run.messages[run.messagesCount - 1].role)) == keccak256(abi.encodePacked(\\\"assistant\\\")),\\n            \\\"No response to previous message\\\"\\n        );\\n        require(\\n            run.owner == msg.sender, \\\"Only chat owner can add messages\\\"\\n        );\\n\\n        Message memory newMessage;\\n        newMessage.content = message;\\n        newMessage.role = \\\"user\\\";\\n        run.messages.push(newMessage);\\n        run.messagesCount++;\\n        // If there is a knowledge base, create a knowledge base query\\n        if (bytes(knowledgeBase).length > 0) {\\n            IOracle(oracleAddress).createKnowledgeBaseQuery(\\n                runId,\\n                knowledgeBase,\\n                message,\\n                3\\n            );\\n        } else {\\n            // Otherwise, create an LLM call\\n            IOracle(oracleAddress).createLlmCall(runId);\\n        }\\n    }\\n\\n    // @notice Retrieves the message history contents of a chat run\\n    // @param chatId The ID of the chat run\\n    // @return An array of message contents\\n    // @dev Called by teeML oracle\\n    function getMessageHistoryContents(uint chatId) public view returns (string[] memory) {\\n        string[] memory messages = new string[](chatRuns[chatId].messages.length);\\n        for (uint i = 0; i < chatRuns[chatId].messages.length; i++) {\\n            messages[i] = chatRuns[chatId].messages[i].content;\\n        }\\n        return messages;\\n    }\\n\\n    // @notice Retrieves the roles of the messages in a chat run\\n    // @param chatId The ID of the chat run\\n    // @return An array of message roles\\n    // @dev Called by teeML oracle\\n    function getMessageHistoryRoles(uint chatId) public view returns (string[] memory) {\\n        string[] memory roles = new string[](chatRuns[chatId].messages.length);\\n        for (uint i = 0; i < chatRuns[chatId].messages.length; i++) {\\n            roles[i] = chatRuns[chatId].messages[i].role;\\n        }\\n        return roles;\\n    }\\n}\",\"keccak256\":\"0xba6119de566457292f49ed5d847b3871489a7558c99f13886b261594687e4320\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IOracle {\\n\\n    struct Content {\\n        string contentType;\\n        string value;\\n    }\\n\\n    struct Message {\\n        string role;\\n        Content [] content;\\n    }\\n\\n    struct OpenAiRequest {\\n        // \\\"gpt-4-turbo\\\", \\\"gpt-4-turbo-preview\\\" or \\\"gpt-3.5-turbo-1106\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        // JSON list for tools in OpenAI format, empty for null, names have to match the supported tools\\n        string tools;\\n        // \\\"none\\\", \\\"auto\\\" or empty str which defaults to auto on OpenAI side\\n        string toolChoice;\\n        string user;\\n    }\\n\\n    struct OpenAiResponse {\\n        string id;\\n\\n        // either content is an empty srt or functionName and functionArguments\\n        string content;\\n        string functionName;\\n        string functionArguments;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct GroqRequest {\\n        // \\\"llama3-8b-8192\\\", \\\"llama3-70b-8192\\\", \\\"mixtral-8x7b-32768\\\" or \\\"gemma-7b-it\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        string user;\\n    }\\n\\n    struct GroqResponse {\\n        string id;\\n\\n        string content;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct KnowledgeBaseQueryRequest {\\n        string cid;\\n        string query;\\n        uint32 num_documents;\\n    }\\n\\n    function createLlmCall(\\n        uint promptId\\n    ) external returns (uint);\\n\\n    function createGroqLlmCall(\\n        uint promptId,\\n        GroqRequest memory request\\n    ) external returns (uint);\\n\\n    function createOpenAiLlmCall(\\n        uint promptId,\\n        OpenAiRequest memory request\\n    ) external returns (uint);\\n\\n    function createFunctionCall(\\n        uint functionCallbackId,\\n        string memory functionType,\\n        string memory functionInput\\n    ) external returns (uint i);\\n\\n    function createKnowledgeBaseQuery(\\n        uint kbQueryCallbackId,\\n        string memory cid,\\n        string memory query,\\n        uint32 num_documents\\n    ) external returns (uint i);\\n}\",\"keccak256\":\"0xadf297ae3315255b8df039ffbd9fd4ea11f01d4d109c49d8ec765ae9b0cb578d\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234620002475762001ac4803803806200001d816200024c565b928339810190604081830312620002475780516001600160a01b038116919082900362000247576020818101516001600160401b039283821162000247570192601f90858286011215620002475784518481116200021c57601f19956200008a828501881686016200024c565b978289528583830101116200024757849060005b838110620002325750506000918801015260018060a01b031933816002541617600255600354161760035584519283116200021c576004948554926001938481811c9116801562000211575b82821014620001fc57838111620001b1575b5080928511600114620001485750839450908392916000946200013c575b50501b916000199060031b1c19161790555b6040516118519081620002738239f35b0151925038806200011a565b9294849081168760005284600020946000905b888383106200019657505050106200017c575b505050811b0190556200012c565b015160001960f88460031b161c191690553880806200016e565b8587015188559096019594850194879350908101906200015b565b87600052816000208480880160051c820192848910620001f2575b0160051c019085905b828110620001e5575050620000fc565b60008155018590620001d5565b92508192620001cc565b602288634e487b7160e01b6000525260246000fd5b90607f1690620000ea565b634e487b7160e01b600052604160045260246000fd5b8181018301518a82018401528692016200009e565b600080fd5b6040519190601f01601f191682016001600160401b038111838210176200021c5760405256fe60406080815260048036101561001457600080fd5b600091823560e01c80632843d13514610b175780632d08d82a14610ada5780634c69c00f14610a335780635839a606146107ab578063632cc98b14610772578063941fac371461046d578063a1b67ed1146102f7578063a89ae4ba146102ce578063eb17429a14610235578063ed6e39e5146101855763f997cc251461009957600080fd5b34610181578260031936011261018157805191838154906100b9826110c2565b8086529260019280841690811561015657506001146100fa575b6100f686866100e4828b0383610f82565b5191829160208352602083019061103b565b0390f35b815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82861061013e575050506100e48260206100f69582010194386100d3565b80546020878701810191909152909501948101610120565b90506100f69750869350602092506100e494915060ff191682840152151560051b82010194386100d3565b8280fd5b503461018157602091826003193601126102315735928381528083526001906101b28284832001546117d1565b9381835b6101c8575b8451806100f68882611060565b86835282825283858420015481101561022c5790610224826102026102096101f68796898b819a20016111dc565b508951928380926110fc565b0382610f82565b610213828a6117bd565b5261021e81896117bd565b5061146f565b9091926101b6565b6101bb565b8380fd5b5091346102cb57602091826003193601126102c75791909135918281528082526001916102668386842001546117d1565b9382845b61027c575b8651806100f68882611060565b8184528383528487852001548110156102c257906102b982866102096102a9889796838d819b20016111dc565b506102028c5180948193016110fc565b9091929361026a565b61026f565b5080fd5b80fd5b8382346102c757816003193601126102c75760035490516001600160a01b039091168152602090f35b509190346102c75760603660031901126102c75767ffffffffffffffff6024358181116102315761032b9036908401610fbc565b90604435908111610231576103439036908401610fbc565b5061035960018060a01b036003541633146116f8565b813583526020838152848420906002600183019201938454600019810190811161045a5761038790846111dc565b5087516103a98161039b868201809561173b565b03601f198101835282610f82565b519020875183810190633ab9b2b960e11b82528381526103c881610f50565b51902003610419575068185cdcda5cdd185b9d60ba1b61040a9495966103ec611192565b948386015251916103fc83610f50565b60098352820152825261120e565b610414815461146f565b905580f35b60649187519162461bcd60e51b8352820152601860248201527f4e6f206d65737361676520746f20726573706f6e6420746f00000000000000006044820152fd5b634e487b7160e01b875260118252602487fd5b5090346101815760031991808336011261023157813567ffffffffffffffff811161076e5761049f9036908401610fbc565b926024928335918287526020958787528488209160019283810160028201908154600019810190811161075c576104d690826111dc565b5061039b6104ec8d8c519283918201809561173b565b51902089518c81019068185cdcda5cdd185b9d60ba1b82526009815261051181610f50565b5190200361071a5791546001600160a01b039290831633036106da57918a97969593916105578d9694610542611192565b90868c8301526105506111bc565b825261120e565b610561815461146f565b905561056d86546110c2565b156106a5576003541694608089519a8b9863a252a95160e01b8a52838a0152880152849381549161059d836110c2565b928360848b015289838216918260001461067d575050600114610620575b50505082869493926105d6928680950301604485015261103b565b6003606483015203925af190811561061757506105f257505080f35b813d8311610610575b6106058183610f82565b810103126102cb5780f35b503d6105fb565b513d85823e3d90fd5b865291935084917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061066157505050850160a401918082876105bb565b805460a4858e0101528c998c99508e9750909301928101610649565b60ff191660a48083019190915294151560051b81019094019650849386935091506105bb9050565b935050505060039591955416948785519687948593636c4e899160e11b85528401525af190811561061757506105f257505080f35b6064878c8c818d519362461bcd60e51b85528401528201527f4f6e6c792063686174206f776e65722063616e20616464206d657373616765736044820152fd5b885162461bcd60e51b81528088018c9052601f818c01527f4e6f20726573706f6e736520746f2070726576696f7573206d657373616765006044820152606490fd5b634e487b7160e01b8d52601188528a8dfd5b8480fd5b509034610181576020366003190112610181579181923581528060205220600260018060a01b0382541691015482519182526020820152f35b5082346102cb57806003193601126102cb5781519061020082019082821067ffffffffffffffff831117610a2057602084610a19858583526101c981527f596f75206172652061204e50432063686172616374657220696e20612067616d848201527f652e20596f7520776572652061207769746e65737320746f2061206d75726465838201527f7220627574206172652072656c756374616e7420746f2064697363757373206960608201527f74206f7220736179207768617420796f75207361772e200a205461736b3a205960808201527f6f752077696c6c20616374206c696b6520746865204e5043206368617261637460a08201527f657220415420414c4c2054494d45532e200a20596f752077696c6c207370656160c08201527f6b20617320616e20756e65647563617465642073747265657420706572736f6e60e08201527f20696e206f6c64656e2074696d65732e200a20596f7520617265206e6f7420776101008201527f696c6c696e6720746f20676976652075702074686520696e666f726d6174696f6101208201527f6e20796f7520686176652061626f757420746865206d757264657220616e64206101408201527f77696c6c206f6e6c7920646f20736f20756e6465722065787472656d652070726101608201527f657373757265206f7220666f72206c6172676520616d6f756e74206f66206d6f6101808201527f6e65792e200a20596f752077696c6c206e6f7420766f6c756e7465657220696e6101a08201527f666f726d6174696f6e20656173696c792e20596f7520646f6e27742077616e746101c082015268103a37903a30b6359760b91b6101e0820152611494565b9051908152f35b634e487b7160e01b815260418552602490fd5b5090346101815760203660031901126101815780356001600160a01b03818116939184900361076e57600254163303610aa1575050600380546001600160a01b031916821790557f107a9fafffb7ac890f780879e423760c9ffea8dcee8045681f40f542aede2cb88280a280f35b906020606492519162461bcd60e51b8352820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b6044820152fd5b5082346102cb5760203660031901126102cb5782359067ffffffffffffffff82116102cb5750610b12602093610a1992369101610fbc565b611494565b509190346102c75760603660031901126102c75780359060249384359267ffffffffffffffff95868511610f4c5736602386011215610f4c578484013594610b5e86610fa4565b90610b6b85519283610f82565b868252602096838884019160051b83010191368311610f4857848101915b838310610f1e5750505050604435888111610f1a57610bab9036908701610fbc565b506003546001600160a01b039190610bc690831633146116f8565b838852878752848820600281015460019a9160001991828101918d01908211610f08579081610bf882610c08946111dc565b508c8b519485918201809361173b565b0393610c1c601f1995868101835282610f82565b5190208a518d810190633ab9b2b960e11b82528d8152610c3b81610f50565b51902003610ec6578d91610c4e916111dc565b5001938c895191610c6a83610c63818a6110fc565b0384610f82565b8c838251610e70575b50908b8f928493945b610ded575b50505050508051938411610ddb57610c9985546110c2565b601f8111610d93575b508a91601f8511600114610d3157508b9c84939284928d9e9d9b9c9d95610d26575b50501b9260031b1c19161790555b60035416948785519687948593636c4e899160e11b85528401525af19081156106175750610cfe578280f35b813d8311610d1f575b610d118183610f82565b810103126102cb5738808280f35b503d610d07565b015193503880610cc4565b8493919d941691858d528b8d20928d5b818110610d7e57509d848d9e9f9d9b9c9d10610d66575b50505050811b019055610cd2565b01519060f88460031b161c1916905538808080610d58565b8f830151855593860193918d01918d01610d41565b858d528b8d20601f860160051c8101918d8710610dd1575b601f0160051c01908e908e5b838210610dc657505050610ca2565b8155018e908e610db7565b9091508190610dab565b634e487b7160e01b8c5260418a52868cfd5b82939495919251861015610e64576021610e5a9392610e5492610e1089886117bd565b5194519482610e288794518092858088019101611018565b8301610e3c82518093858085019101611018565b600560f91b9101918201520386810184520182610f82565b9361146f565b91908b8e83610c7c565b82919550849350610c81565b610ebe919294506034908d519381610e918693518092848087019101611018565b8201907305052932b632bb30b73a1031b7b73a32bc3a1d0560611b90820152036014810184520182610f82565b918c38610c73565b895162461bcd60e51b8152808c018d9052601c818a01527f4e6f206d65737361676520746f2061646420636f6e7465787420746f000000006044820152606490fd5b634e487b7160e01b8c5260118a52868cfd5b8780fd5b82358c8111610f44578a91610f398392893691870101610fbc565b815201920191610b89565b8b80fd5b8980fd5b8580fd5b6040810190811067ffffffffffffffff821117610f6c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610f6c57604052565b67ffffffffffffffff8111610f6c5760051b60200190565b81601f820112156110135780359067ffffffffffffffff8211610f6c5760405192610ff1601f8401601f191660200185610f82565b8284526020838301011161101357816000926020809301838601378301015290565b600080fd5b60005b83811061102b5750506000910152565b818101518382015260200161101b565b9060209161105481518092818552858086019101611018565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106110945750505050505090565b90919293949584806110b2600193603f198682030187528a5161103b565b9801930193019194939290611084565b90600182811c921680156110f2575b60208310146110dc57565b634e487b7160e01b600052602260045260246000fd5b91607f16916110d1565b906000929180549161110d836110c2565b91828252600193848116908160001461116f575060011461112f575b50505050565b90919394506000526020928360002092846000945b83861061115b575050505001019038808080611129565b805485870183015294019385908201611144565b9294505050602093945060ff191683830152151560051b01019038808080611129565b604051906040820182811067ffffffffffffffff821117610f6c5760405260606020838281520152565b604051906111c982610f50565b60048252633ab9b2b960e11b6020830152565b80548210156111f85760005260206000209060011b0190600090565b634e487b7160e01b600052603260045260246000fd5b805468010000000000000000811015610f6c576112329060019283820181556111dc565b61145957825180519167ffffffffffffffff92838111610f6c57849061125883546110c2565b93601f94858111611408575b5060209085831160011461139f57602094929160009183611394575b5050600019600383901b1c191690831b1781555b019401518051928311610f6c576112ab85546110c2565b82811161134c575b5060209183116001146112ec579282939183926000946112e1575b50501b916000199060031b1c1916179055565b0151925038806112ce565b90601f198316918560005283826000209360005b878282106113335750501061131a575b505050811b019055565b015160001960f88460031b161c19169055388080611310565b8486015187559095019460209485019487935001611300565b8560005260206000208380860160051c8201926020871061138b575b0160051c019085905b82811061137f5750506112b3565b60008155018590611371565b92508192611368565b015190503880611280565b90601f1983169185600052816000209260005b8181106113f0575091859391856020989694106113d7575b505050811b018155611294565b015160001960f88460031b161c191690553880806113ca565b8284015185558a9690940193602093840193016113b2565b909192506000848152602081208680860160051c82019360208710611450575b908a9695949392910160051c01915b828110611445575050611264565b818155899501611437565b93508193611428565b634e487b7160e01b600052600060045260246000fd5b600019811461147e5760010190565b634e487b7160e01b600052601160045260246000fd5b9060019182546000908152602081815284600260408420336bffffffffffffffffffffffff60a01b8254161781556114e46114cd611192565b87868201526114da6111bc565b815284830161120e565b01558454926114f28461146f565b86556114ff6004546110c2565b156116835760035460405163a252a95160e01b8152600480820187905260806024830152549097849389936001600160a01b031692879283929190611543826110c2565b9182608489015287828216918260001461165c5750506001146115fb575b505061157c859392849260031984830301604485015261103b565b6003606483015203925af19485156115f0578394956115c1575b50505b7fd1de2c4de50323207202f3df0bb1dec1a42e233aec245f25519d674c10bd72ca339180a390565b90809293503d83116115e9575b6115d88183610f82565b810103126102cb5781903880611596565b503d6115ce565b6040513d84823e3d90fd5b6004855291925083917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061163f57505050840160a4019061157c85611561565b805497840160a4019790975288978d978b96509301928101611626565b60ff191660a48083019190915293151560051b8101909301945061157c9291506115619050565b50600354604051636c4e899160e11b815260048101859052955081908690602490829086906001600160a01b03165af19485156115f0578394956116c9575b5050611599565b90809293503d83116116f1575b6116e08183610f82565b810103126102cb57819038806116c2565b503d6116d6565b156116ff57565b60405162461bcd60e51b815260206004820152601460248201527343616c6c6572206973206e6f74206f7261636c6560601b6044820152606490fd5b60009291815461174a816110c2565b926001918083169081156117a257506001146117665750505050565b90919293945060005260209081600020906000915b8583106117915750505050019038808080611129565b80548584015291830191810161177b565b60ff1916845250505081151590910201915038808080611129565b80518210156111f85760209160051b010190565b906117db82610fa4565b6117e86040519182610f82565b82815280926117f9601f1991610fa4565b019060005b82811061180a57505050565b8060606020809385010152016117fe56fea26469706673582212206e21bd6cf82c76cb0ca946acf58851f14ae1f713e3093e0f3953b9b7ae74005e64736f6c63430008110033",
  "deployedBytecode": "0x60406080815260048036101561001457600080fd5b600091823560e01c80632843d13514610b175780632d08d82a14610ada5780634c69c00f14610a335780635839a606146107ab578063632cc98b14610772578063941fac371461046d578063a1b67ed1146102f7578063a89ae4ba146102ce578063eb17429a14610235578063ed6e39e5146101855763f997cc251461009957600080fd5b34610181578260031936011261018157805191838154906100b9826110c2565b8086529260019280841690811561015657506001146100fa575b6100f686866100e4828b0383610f82565b5191829160208352602083019061103b565b0390f35b815294507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82861061013e575050506100e48260206100f69582010194386100d3565b80546020878701810191909152909501948101610120565b90506100f69750869350602092506100e494915060ff191682840152151560051b82010194386100d3565b8280fd5b503461018157602091826003193601126102315735928381528083526001906101b28284832001546117d1565b9381835b6101c8575b8451806100f68882611060565b86835282825283858420015481101561022c5790610224826102026102096101f68796898b819a20016111dc565b508951928380926110fc565b0382610f82565b610213828a6117bd565b5261021e81896117bd565b5061146f565b9091926101b6565b6101bb565b8380fd5b5091346102cb57602091826003193601126102c75791909135918281528082526001916102668386842001546117d1565b9382845b61027c575b8651806100f68882611060565b8184528383528487852001548110156102c257906102b982866102096102a9889796838d819b20016111dc565b506102028c5180948193016110fc565b9091929361026a565b61026f565b5080fd5b80fd5b8382346102c757816003193601126102c75760035490516001600160a01b039091168152602090f35b509190346102c75760603660031901126102c75767ffffffffffffffff6024358181116102315761032b9036908401610fbc565b90604435908111610231576103439036908401610fbc565b5061035960018060a01b036003541633146116f8565b813583526020838152848420906002600183019201938454600019810190811161045a5761038790846111dc565b5087516103a98161039b868201809561173b565b03601f198101835282610f82565b519020875183810190633ab9b2b960e11b82528381526103c881610f50565b51902003610419575068185cdcda5cdd185b9d60ba1b61040a9495966103ec611192565b948386015251916103fc83610f50565b60098352820152825261120e565b610414815461146f565b905580f35b60649187519162461bcd60e51b8352820152601860248201527f4e6f206d65737361676520746f20726573706f6e6420746f00000000000000006044820152fd5b634e487b7160e01b875260118252602487fd5b5090346101815760031991808336011261023157813567ffffffffffffffff811161076e5761049f9036908401610fbc565b926024928335918287526020958787528488209160019283810160028201908154600019810190811161075c576104d690826111dc565b5061039b6104ec8d8c519283918201809561173b565b51902089518c81019068185cdcda5cdd185b9d60ba1b82526009815261051181610f50565b5190200361071a5791546001600160a01b039290831633036106da57918a97969593916105578d9694610542611192565b90868c8301526105506111bc565b825261120e565b610561815461146f565b905561056d86546110c2565b156106a5576003541694608089519a8b9863a252a95160e01b8a52838a0152880152849381549161059d836110c2565b928360848b015289838216918260001461067d575050600114610620575b50505082869493926105d6928680950301604485015261103b565b6003606483015203925af190811561061757506105f257505080f35b813d8311610610575b6106058183610f82565b810103126102cb5780f35b503d6105fb565b513d85823e3d90fd5b865291935084917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061066157505050850160a401918082876105bb565b805460a4858e0101528c998c99508e9750909301928101610649565b60ff191660a48083019190915294151560051b81019094019650849386935091506105bb9050565b935050505060039591955416948785519687948593636c4e899160e11b85528401525af190811561061757506105f257505080f35b6064878c8c818d519362461bcd60e51b85528401528201527f4f6e6c792063686174206f776e65722063616e20616464206d657373616765736044820152fd5b885162461bcd60e51b81528088018c9052601f818c01527f4e6f20726573706f6e736520746f2070726576696f7573206d657373616765006044820152606490fd5b634e487b7160e01b8d52601188528a8dfd5b8480fd5b509034610181576020366003190112610181579181923581528060205220600260018060a01b0382541691015482519182526020820152f35b5082346102cb57806003193601126102cb5781519061020082019082821067ffffffffffffffff831117610a2057602084610a19858583526101c981527f596f75206172652061204e50432063686172616374657220696e20612067616d848201527f652e20596f7520776572652061207769746e65737320746f2061206d75726465838201527f7220627574206172652072656c756374616e7420746f2064697363757373206960608201527f74206f7220736179207768617420796f75207361772e200a205461736b3a205960808201527f6f752077696c6c20616374206c696b6520746865204e5043206368617261637460a08201527f657220415420414c4c2054494d45532e200a20596f752077696c6c207370656160c08201527f6b20617320616e20756e65647563617465642073747265657420706572736f6e60e08201527f20696e206f6c64656e2074696d65732e200a20596f7520617265206e6f7420776101008201527f696c6c696e6720746f20676976652075702074686520696e666f726d6174696f6101208201527f6e20796f7520686176652061626f757420746865206d757264657220616e64206101408201527f77696c6c206f6e6c7920646f20736f20756e6465722065787472656d652070726101608201527f657373757265206f7220666f72206c6172676520616d6f756e74206f66206d6f6101808201527f6e65792e200a20596f752077696c6c206e6f7420766f6c756e7465657220696e6101a08201527f666f726d6174696f6e20656173696c792e20596f7520646f6e27742077616e746101c082015268103a37903a30b6359760b91b6101e0820152611494565b9051908152f35b634e487b7160e01b815260418552602490fd5b5090346101815760203660031901126101815780356001600160a01b03818116939184900361076e57600254163303610aa1575050600380546001600160a01b031916821790557f107a9fafffb7ac890f780879e423760c9ffea8dcee8045681f40f542aede2cb88280a280f35b906020606492519162461bcd60e51b8352820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b6044820152fd5b5082346102cb5760203660031901126102cb5782359067ffffffffffffffff82116102cb5750610b12602093610a1992369101610fbc565b611494565b509190346102c75760603660031901126102c75780359060249384359267ffffffffffffffff95868511610f4c5736602386011215610f4c578484013594610b5e86610fa4565b90610b6b85519283610f82565b868252602096838884019160051b83010191368311610f4857848101915b838310610f1e5750505050604435888111610f1a57610bab9036908701610fbc565b506003546001600160a01b039190610bc690831633146116f8565b838852878752848820600281015460019a9160001991828101918d01908211610f08579081610bf882610c08946111dc565b508c8b519485918201809361173b565b0393610c1c601f1995868101835282610f82565b5190208a518d810190633ab9b2b960e11b82528d8152610c3b81610f50565b51902003610ec6578d91610c4e916111dc565b5001938c895191610c6a83610c63818a6110fc565b0384610f82565b8c838251610e70575b50908b8f928493945b610ded575b50505050508051938411610ddb57610c9985546110c2565b601f8111610d93575b508a91601f8511600114610d3157508b9c84939284928d9e9d9b9c9d95610d26575b50501b9260031b1c19161790555b60035416948785519687948593636c4e899160e11b85528401525af19081156106175750610cfe578280f35b813d8311610d1f575b610d118183610f82565b810103126102cb5738808280f35b503d610d07565b015193503880610cc4565b8493919d941691858d528b8d20928d5b818110610d7e57509d848d9e9f9d9b9c9d10610d66575b50505050811b019055610cd2565b01519060f88460031b161c1916905538808080610d58565b8f830151855593860193918d01918d01610d41565b858d528b8d20601f860160051c8101918d8710610dd1575b601f0160051c01908e908e5b838210610dc657505050610ca2565b8155018e908e610db7565b9091508190610dab565b634e487b7160e01b8c5260418a52868cfd5b82939495919251861015610e64576021610e5a9392610e5492610e1089886117bd565b5194519482610e288794518092858088019101611018565b8301610e3c82518093858085019101611018565b600560f91b9101918201520386810184520182610f82565b9361146f565b91908b8e83610c7c565b82919550849350610c81565b610ebe919294506034908d519381610e918693518092848087019101611018565b8201907305052932b632bb30b73a1031b7b73a32bc3a1d0560611b90820152036014810184520182610f82565b918c38610c73565b895162461bcd60e51b8152808c018d9052601c818a01527f4e6f206d65737361676520746f2061646420636f6e7465787420746f000000006044820152606490fd5b634e487b7160e01b8c5260118a52868cfd5b8780fd5b82358c8111610f44578a91610f398392893691870101610fbc565b815201920191610b89565b8b80fd5b8980fd5b8580fd5b6040810190811067ffffffffffffffff821117610f6c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610f6c57604052565b67ffffffffffffffff8111610f6c5760051b60200190565b81601f820112156110135780359067ffffffffffffffff8211610f6c5760405192610ff1601f8401601f191660200185610f82565b8284526020838301011161101357816000926020809301838601378301015290565b600080fd5b60005b83811061102b5750506000910152565b818101518382015260200161101b565b9060209161105481518092818552858086019101611018565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106110945750505050505090565b90919293949584806110b2600193603f198682030187528a5161103b565b9801930193019194939290611084565b90600182811c921680156110f2575b60208310146110dc57565b634e487b7160e01b600052602260045260246000fd5b91607f16916110d1565b906000929180549161110d836110c2565b91828252600193848116908160001461116f575060011461112f575b50505050565b90919394506000526020928360002092846000945b83861061115b575050505001019038808080611129565b805485870183015294019385908201611144565b9294505050602093945060ff191683830152151560051b01019038808080611129565b604051906040820182811067ffffffffffffffff821117610f6c5760405260606020838281520152565b604051906111c982610f50565b60048252633ab9b2b960e11b6020830152565b80548210156111f85760005260206000209060011b0190600090565b634e487b7160e01b600052603260045260246000fd5b805468010000000000000000811015610f6c576112329060019283820181556111dc565b61145957825180519167ffffffffffffffff92838111610f6c57849061125883546110c2565b93601f94858111611408575b5060209085831160011461139f57602094929160009183611394575b5050600019600383901b1c191690831b1781555b019401518051928311610f6c576112ab85546110c2565b82811161134c575b5060209183116001146112ec579282939183926000946112e1575b50501b916000199060031b1c1916179055565b0151925038806112ce565b90601f198316918560005283826000209360005b878282106113335750501061131a575b505050811b019055565b015160001960f88460031b161c19169055388080611310565b8486015187559095019460209485019487935001611300565b8560005260206000208380860160051c8201926020871061138b575b0160051c019085905b82811061137f5750506112b3565b60008155018590611371565b92508192611368565b015190503880611280565b90601f1983169185600052816000209260005b8181106113f0575091859391856020989694106113d7575b505050811b018155611294565b015160001960f88460031b161c191690553880806113ca565b8284015185558a9690940193602093840193016113b2565b909192506000848152602081208680860160051c82019360208710611450575b908a9695949392910160051c01915b828110611445575050611264565b818155899501611437565b93508193611428565b634e487b7160e01b600052600060045260246000fd5b600019811461147e5760010190565b634e487b7160e01b600052601160045260246000fd5b9060019182546000908152602081815284600260408420336bffffffffffffffffffffffff60a01b8254161781556114e46114cd611192565b87868201526114da6111bc565b815284830161120e565b01558454926114f28461146f565b86556114ff6004546110c2565b156116835760035460405163a252a95160e01b8152600480820187905260806024830152549097849389936001600160a01b031692879283929190611543826110c2565b9182608489015287828216918260001461165c5750506001146115fb575b505061157c859392849260031984830301604485015261103b565b6003606483015203925af19485156115f0578394956115c1575b50505b7fd1de2c4de50323207202f3df0bb1dec1a42e233aec245f25519d674c10bd72ca339180a390565b90809293503d83116115e9575b6115d88183610f82565b810103126102cb5781903880611596565b503d6115ce565b6040513d84823e3d90fd5b6004855291925083917f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b82841061163f57505050840160a4019061157c85611561565b805497840160a4019790975288978d978b96509301928101611626565b60ff191660a48083019190915293151560051b8101909301945061157c9291506115619050565b50600354604051636c4e899160e11b815260048101859052955081908690602490829086906001600160a01b03165af19485156115f0578394956116c9575b5050611599565b90809293503d83116116f1575b6116e08183610f82565b810103126102cb57819038806116c2565b503d6116d6565b156116ff57565b60405162461bcd60e51b815260206004820152601460248201527343616c6c6572206973206e6f74206f7261636c6560601b6044820152606490fd5b60009291815461174a816110c2565b926001918083169081156117a257506001146117665750505050565b90919293945060005260209081600020906000915b8583106117915750505050019038808080611129565b80548584015291830191810161177b565b60ff1916845250505081151590910201915038808080611129565b80518210156111f85760209160051b010190565b906117db82610fa4565b6117e86040519182610f82565b82815280926117f9601f1991610fa4565b019060005b82811061180a57505050565b8060606020809385010152016117fe56fea26469706673582212206e21bd6cf82c76cb0ca946acf58851f14ae1f713e3093e0f3953b9b7ae74005e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1243,
        "contract": "contracts/StubbornAgent.sol:StubbornAgent",
        "label": "chatRuns",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_struct(ChatRun)1238_storage)"
      },
      {
        "astId": 1245,
        "contract": "contracts/StubbornAgent.sol:StubbornAgent",
        "label": "chatRunsCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1253,
        "contract": "contracts/StubbornAgent.sol:StubbornAgent",
        "label": "owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1255,
        "contract": "contracts/StubbornAgent.sol:StubbornAgent",
        "label": "oracleAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1257,
        "contract": "contracts/StubbornAgent.sol:StubbornAgent",
        "label": "knowledgeBase",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Message)1229_storage)dyn_storage": {
        "base": "t_struct(Message)1229_storage",
        "encoding": "dynamic_array",
        "label": "struct StubbornAgent.Message[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_struct(ChatRun)1238_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct StubbornAgent.ChatRun)",
        "numberOfBytes": "32",
        "value": "t_struct(ChatRun)1238_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ChatRun)1238_storage": {
        "encoding": "inplace",
        "label": "struct StubbornAgent.ChatRun",
        "members": [
          {
            "astId": 1231,
            "contract": "contracts/StubbornAgent.sol:StubbornAgent",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1235,
            "contract": "contracts/StubbornAgent.sol:StubbornAgent",
            "label": "messages",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Message)1229_storage)dyn_storage"
          },
          {
            "astId": 1237,
            "contract": "contracts/StubbornAgent.sol:StubbornAgent",
            "label": "messagesCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Message)1229_storage": {
        "encoding": "inplace",
        "label": "struct StubbornAgent.Message",
        "members": [
          {
            "astId": 1226,
            "contract": "contracts/StubbornAgent.sol:StubbornAgent",
            "label": "role",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1228,
            "contract": "contracts/StubbornAgent.sol:StubbornAgent",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}