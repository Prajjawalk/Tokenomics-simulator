{
  "address": "0xe7d6B85743CB901F1542beB8c8a44c5811fa2f27",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "initialOracleAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "systemPrompt",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "AgentRunCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "OracleAddressUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "projectName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "projectDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "totalSupply",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "teamAllocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "advisorAllocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "publicSaleAllocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "privateSaleAllocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "communityAllocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "futureDevAllocation",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tokenPrice",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "hardCap",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "softCap",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "acceptedCrypto",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "consensus",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "circulatingSupply",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "communitySize",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "poolPercentage",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "liquidityPool",
          "type": "string"
        }
      ],
      "name": "ICOTradeBehaviour",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agentRuns",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "responsesCount",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "max_iterations",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "is_finished",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryContents",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "agentId",
          "type": "uint256"
        }
      ],
      "name": "getMessageHistoryRoles",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        }
      ],
      "name": "isRunFinished",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "response",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "onOracleFunctionResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "id",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "content",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "functionName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "functionArguments",
              "type": "string"
            },
            {
              "internalType": "uint64",
              "name": "created",
              "type": "uint64"
            },
            {
              "internalType": "string",
              "name": "model",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "systemFingerprint",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "object",
              "type": "string"
            },
            {
              "internalType": "uint32",
              "name": "completionTokens",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "promptTokens",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "totalTokens",
              "type": "uint32"
            }
          ],
          "internalType": "struct IOracle.OpenAiResponse",
          "name": "response",
          "type": "tuple"
        },
        {
          "internalType": "string",
          "name": "errorMessage",
          "type": "string"
        }
      ],
      "name": "onOracleOpenAiLlmResponse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "prompt",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "query",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "max_iterations",
          "type": "uint8"
        }
      ],
      "name": "runAgent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x972a1403d47679bc13ec815b302ff12355c97cdfb28e40366054a3c299952436",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0x324CF97D4373ef009FDF2F1afFc58406C86899Af",
    "contractAddress": "0xe7d6B85743CB901F1542beB8c8a44c5811fa2f27",
    "transactionIndex": 0,
    "gasUsed": "2489746",
    "logsBloom": "0x
    "blockHash": "0x66b2badf9b8e19d23bea3b300d1d247d0d9da97ade475b04263d25bf4bade55b",
    "transactionHash": "0x972a1403d47679bc13ec815b302ff12355c97cdfb28e40366054a3c299952436",
    "logs": [],
    "blockNumber": 14701491,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4168668812C94a3167FCd41D12014c5498D74d7e",
    "You are a helpful assistant \n"
  ],
  "numDeployments": 6,
  "solcInputHash": "46ab4cdd93c3df1b611f34ae39af9776",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"systemPrompt\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"AgentRunCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"OracleAddressUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"projectName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"projectDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"totalSupply\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"teamAllocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"advisorAllocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"publicSaleAllocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"privateSaleAllocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"communityAllocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"futureDevAllocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenPrice\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"hardCap\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"softCap\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"acceptedCrypto\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"consensus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"circulatingSupply\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"communitySize\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"poolPercentage\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"liquidityPool\",\"type\":\"string\"}],\"name\":\"ICOTradeBehaviour\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agentRuns\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"responsesCount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"max_iterations\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"is_finished\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryContents\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"agentId\",\"type\":\"uint256\"}],\"name\":\"getMessageHistoryRoles\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"}],\"name\":\"isRunFinished\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"response\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"onOracleFunctionResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"id\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"functionName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"functionArguments\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"created\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"model\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"systemFingerprint\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"object\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"completionTokens\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"promptTokens\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"totalTokens\",\"type\":\"uint32\"}],\"internalType\":\"struct IOracle.OpenAiResponse\",\"name\":\"response\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"errorMessage\",\"type\":\"string\"}],\"name\":\"onOracleOpenAiLlmResponse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"prompt\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"query\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"max_iterations\",\"type\":\"uint8\"}],\"name\":\"runAgent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TraderAgent.sol\":\"TraderAgent\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/TraderAgent.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\nimport \\\"./interfaces/IOracle.sol\\\";\\n\\ncontract TraderAgent {\\n\\tstring public prompt;\\n\\n\\tstruct Message {\\n\\t\\tstring role;\\n\\t\\tstring content;\\n\\t}\\n\\n\\tstruct AgentRun {\\n\\t\\taddress owner;\\n\\t\\tMessage[] messages;\\n\\t\\tuint responsesCount;\\n\\t\\tuint8 max_iterations;\\n\\t\\tbool is_finished;\\n\\t}\\n\\n\\tmapping(uint => AgentRun) public agentRuns;\\n\\tuint private agentRunCount;\\n\\n\\tevent AgentRunCreated(address indexed owner, uint indexed runId);\\n\\n\\taddress private owner;\\n\\taddress public oracleAddress;\\n\\n\\tevent OracleAddressUpdated(address indexed newOracleAddress);\\n\\n\\tIOracle.OpenAiRequest private config;\\n\\n\\tconstructor(address initialOracleAddress, string memory systemPrompt) {\\n\\t\\towner = msg.sender;\\n\\t\\toracleAddress = initialOracleAddress;\\n\\t\\tprompt = systemPrompt;\\n\\n\\t\\tconfig = IOracle.OpenAiRequest({\\n\\t\\t\\tmodel: \\\"gpt-4-turbo-preview\\\",\\n\\t\\t\\tfrequencyPenalty: 21, // > 20 for null\\n\\t\\t\\tlogitBias: \\\"\\\", // empty str for null\\n\\t\\t\\tmaxTokens: 1000, // 0 for null\\n\\t\\t\\tpresencePenalty: 21, // > 20 for null\\n\\t\\t\\tresponseFormat: '{\\\"type\\\":\\\"text\\\"}',\\n\\t\\t\\tseed: 0, // null\\n\\t\\t\\tstop: \\\"\\\", // null\\n\\t\\t\\ttemperature: 10, // Example temperature (scaled up, 10 means 1.0), > 20 means null\\n\\t\\t\\ttopP: 101, // Percentage 0-100, > 100 means null\\n\\t\\t\\ttools: '[{\\\"type\\\":\\\"function\\\",\\\"function\\\":{\\\"name\\\":\\\"image_generation\\\",\\\"description\\\":\\\"Generates an image using Dalle-2\\\",\\\"parameters\\\":{\\\"type\\\":\\\"object\\\",\\\"properties\\\":{\\\"prompt\\\":{\\\"type\\\":\\\"string\\\",\\\"description\\\":\\\"Dalle-2 prompt to generate an image\\\"}},\\\"required\\\":[\\\"prompt\\\"]}}}]',\\n\\t\\t\\ttoolChoice: \\\"auto\\\", // \\\"none\\\" or \\\"auto\\\"\\n\\t\\t\\tuser: \\\"\\\" // null\\n\\t\\t});\\n\\t}\\n\\n\\tmodifier onlyOwner() {\\n\\t\\trequire(msg.sender == owner, \\\"Caller is not owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyOracle() {\\n\\t\\trequire(msg.sender == oracleAddress, \\\"Caller is not oracle\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction setOracleAddress(address newOracleAddress) public onlyOwner {\\n\\t\\trequire(msg.sender == owner, \\\"Caller is not the owner\\\");\\n\\t\\toracleAddress = newOracleAddress;\\n\\t\\temit OracleAddressUpdated(newOracleAddress);\\n\\t}\\n\\n\\tfunction ICOTradeBehaviour(\\n\\t\\tstring memory projectName,\\n\\t\\tstring memory projectDescription,\\n\\t\\tstring memory totalSupply,\\n\\t\\tstring memory teamAllocation,\\n\\t\\tstring memory advisorAllocation,\\n\\t\\tstring memory publicSaleAllocation,\\n\\t\\tstring memory privateSaleAllocation,\\n\\t\\tstring memory communityAllocation,\\n\\t\\tstring memory futureDevAllocation,\\n\\t\\tstring memory tokenPrice,\\n\\t\\tstring memory hardCap,\\n\\t\\tstring memory softCap,\\n\\t\\tstring memory acceptedCrypto,\\n\\t\\tstring memory consensus,\\n\\t\\tstring memory circulatingSupply,\\n\\t\\tstring memory communitySize,\\n\\t\\tstring memory poolPercentage,\\n\\t\\tstring memory liquidityPool\\n\\t) public returns (uint i) {\\n\\t\\tstring memory query = string.concat(\\n\\t\\t\\t\\\"You are a helpful assistant that helps with the investment decision in a particular crypto token. \\\\n\\\",\\n\\t\\t\\t\\\"I will give you the following information -\\\\n\\\",\\n\\t\\t\\t\\\"Name of the ICO project: \\\",\\n\\t\\t\\tprojectName,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Project description: \\\",\\n\\t\\t\\tprojectDescription,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"The token total supply: \\\",\\n\\t\\t\\ttotalSupply,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Allocation for founders/team: \\\",\\n\\t\\t\\tteamAllocation,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Allocation for advisors: \\\",\\n\\t\\t\\tadvisorAllocation,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Allocation for public sale: \\\",\\n\\t\\t\\tpublicSaleAllocation,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Allocation for private sale: \\\",\\n\\t\\t\\tprivateSaleAllocation,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Allocation for community/marketing: \\\",\\n\\t\\t\\tcommunityAllocation,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Allocation for future development: \\\",\\n\\t\\t\\tfutureDevAllocation,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Token price: \\\",\\n\\t\\t\\ttokenPrice,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Hard cap: \\\",\\n\\t\\t\\thardCap,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Soft cap: \\\",\\n\\t\\t\\tsoftCap,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Accepted cryptocurrencies for investment: \\\",\\n\\t\\t\\tacceptedCrypto,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"The token consensus: \\\",\\n\\t\\t\\tconsensus,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"The token circulating supply in exchange: \\\",\\n\\t\\t\\tcirculatingSupply,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"The token community size: \\\",\\n\\t\\t\\tcommunitySize,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Pool percentage: \\\",\\n\\t\\t\\tpoolPercentage,\\n\\t\\t\\t\\\"\\\\n\\\",\\n\\t\\t\\t\\\"Liquidity Pool value: \\\",\\n\\t\\t\\tliquidityPool,\\n\\t\\t\\t\\\"\\\\n\\\",\\n      \\\"\\\\n\\\",\\n\\t\\t\\t\\\"You must follow the following criteria: \\\\n\\\",\\n\\t\\t\\t\\\"You should choose the amount of tokens you want to buy according to the reasonable price you think an average crypto trader will buy for \\\\n\\\",\\n\\t\\t\\t\\\"You should tell me how many traders will buy this token at a similar price from the exchange as yours update the resulting price and total supply in the exchange \\\\n\\\",\\n\\t\\t\\t\\\"There should be no information about the operation, only the final JSON response. \\\\n\\\",\\n\\t\\t\\t\\\"Tell me in JSON format without the code block notation as follows: \\\\n\\\",\\n\\t\\t\\t\\\"{ \\\\n\\\",\\n\\t\\t\\t'\\\"tokenPrice\\\": \\\"...\\\", \\\\n',\\n\\t\\t\\t'\\\"totalHolders\\\": \\\"...\\\", \\\\n',\\n\\t\\t\\t'\\\"tokenSupply\\\": \\\"...\\\" \\\\n',\\n\\t\\t\\t'}\\\"'\\n\\t\\t);\\n\\n\\t\\treturn runAgent(query, 3);\\n\\t}\\n\\n\\tfunction runAgent(\\n\\t\\tstring memory query,\\n\\t\\tuint8 max_iterations\\n\\t) public returns (uint i) {\\n\\t\\tAgentRun storage run = agentRuns[agentRunCount];\\n\\n\\t\\trun.owner = msg.sender;\\n\\t\\trun.is_finished = false;\\n\\t\\trun.responsesCount = 0;\\n\\t\\trun.max_iterations = max_iterations;\\n\\n\\t\\tMessage memory systemMessage;\\n\\t\\tsystemMessage.content = prompt;\\n\\t\\tsystemMessage.role = \\\"system\\\";\\n\\t\\trun.messages.push(systemMessage);\\n\\n\\t\\tMessage memory newMessage;\\n\\t\\tnewMessage.content = query;\\n\\t\\tnewMessage.role = \\\"user\\\";\\n\\t\\trun.messages.push(newMessage);\\n\\n\\t\\tuint currentId = agentRunCount;\\n\\t\\tagentRunCount = agentRunCount + 1;\\n\\n\\t\\tIOracle(oracleAddress).createOpenAiLlmCall(currentId, config);\\n\\t\\temit AgentRunCreated(run.owner, currentId);\\n\\n\\t\\treturn currentId;\\n\\t}\\n\\n\\tfunction onOracleOpenAiLlmResponse(\\n\\t\\tuint runId,\\n\\t\\tIOracle.OpenAiResponse memory response,\\n\\t\\tstring memory errorMessage\\n\\t) public onlyOracle {\\n\\t\\tAgentRun storage run = agentRuns[runId];\\n\\n\\t\\tif (!compareStrings(errorMessage, \\\"\\\")) {\\n\\t\\t\\tMessage memory newMessage;\\n\\t\\t\\tnewMessage.role = \\\"assistant\\\";\\n\\t\\t\\tnewMessage.content = errorMessage;\\n\\t\\t\\trun.messages.push(newMessage);\\n\\t\\t\\trun.responsesCount++;\\n\\t\\t\\trun.is_finished = true;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (run.responsesCount >= run.max_iterations) {\\n\\t\\t\\trun.is_finished = true;\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tif (!compareStrings(response.content, \\\"\\\")) {\\n\\t\\t\\tMessage memory assistantMessage;\\n\\t\\t\\tassistantMessage.content = response.content;\\n\\t\\t\\tassistantMessage.role = \\\"assistant\\\";\\n\\t\\t\\trun.messages.push(assistantMessage);\\n\\t\\t\\trun.responsesCount++;\\n\\t\\t}\\n\\t\\tif (!compareStrings(response.functionName, \\\"\\\")) {\\n\\t\\t\\tIOracle(oracleAddress).createFunctionCall(\\n\\t\\t\\t\\trunId,\\n\\t\\t\\t\\tresponse.functionName,\\n\\t\\t\\t\\tresponse.functionArguments\\n\\t\\t\\t);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\trun.is_finished = true;\\n\\t}\\n\\n\\tfunction onOracleFunctionResponse(\\n\\t\\tuint runId,\\n\\t\\tstring memory response,\\n\\t\\tstring memory errorMessage\\n\\t) public onlyOracle {\\n\\t\\tAgentRun storage run = agentRuns[runId];\\n\\t\\trequire(!run.is_finished, \\\"Run is finished\\\");\\n\\t\\tstring memory result = response;\\n\\t\\tif (!compareStrings(errorMessage, \\\"\\\")) {\\n\\t\\t\\tresult = errorMessage;\\n\\t\\t}\\n\\t\\tMessage memory newMessage;\\n\\t\\tnewMessage.role = \\\"user\\\";\\n\\t\\tnewMessage.content = result;\\n\\t\\trun.messages.push(newMessage);\\n\\t\\trun.responsesCount++;\\n\\t\\tIOracle(oracleAddress).createOpenAiLlmCall(runId, config);\\n\\t}\\n\\n\\tfunction getMessageHistoryContents(\\n\\t\\tuint agentId\\n\\t) public view returns (string[] memory) {\\n\\t\\tstring[] memory messages = new string[](\\n\\t\\t\\tagentRuns[agentId].messages.length\\n\\t\\t);\\n\\t\\tfor (uint i = 0; i < agentRuns[agentId].messages.length; i++) {\\n\\t\\t\\tmessages[i] = agentRuns[agentId].messages[i].content;\\n\\t\\t}\\n\\t\\treturn messages;\\n\\t}\\n\\n\\tfunction getMessageHistoryRoles(\\n\\t\\tuint agentId\\n\\t) public view returns (string[] memory) {\\n\\t\\tstring[] memory roles = new string[](\\n\\t\\t\\tagentRuns[agentId].messages.length\\n\\t\\t);\\n\\t\\tfor (uint i = 0; i < agentRuns[agentId].messages.length; i++) {\\n\\t\\t\\troles[i] = agentRuns[agentId].messages[i].role;\\n\\t\\t}\\n\\t\\treturn roles;\\n\\t}\\n\\n\\tfunction isRunFinished(uint runId) public view returns (bool) {\\n\\t\\treturn agentRuns[runId].is_finished;\\n\\t}\\n\\n\\tfunction compareStrings(\\n\\t\\tstring memory a,\\n\\t\\tstring memory b\\n\\t) private pure returns (bool) {\\n\\t\\treturn (keccak256(abi.encodePacked((a))) ==\\n\\t\\t\\tkeccak256(abi.encodePacked((b))));\\n\\t}\\n}\\n\",\"keccak256\":\"0x47799ff980efa7f264a55a54358d0c12d423330472c88697f1cd1c52c7cf084d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.13;\\n\\ninterface IOracle {\\n\\n    struct Content {\\n        string contentType;\\n        string value;\\n    }\\n\\n    struct Message {\\n        string role;\\n        Content [] content;\\n    }\\n\\n    struct OpenAiRequest {\\n        // \\\"gpt-4-turbo\\\", \\\"gpt-4-turbo-preview\\\" or \\\"gpt-3.5-turbo-1106\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        // JSON list for tools in OpenAI format, empty for null, names have to match the supported tools\\n        string tools;\\n        // \\\"none\\\", \\\"auto\\\" or empty str which defaults to auto on OpenAI side\\n        string toolChoice;\\n        string user;\\n    }\\n\\n    struct OpenAiResponse {\\n        string id;\\n\\n        // either content is an empty srt or functionName and functionArguments\\n        string content;\\n        string functionName;\\n        string functionArguments;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct GroqRequest {\\n        // \\\"llama3-8b-8192\\\", \\\"llama3-70b-8192\\\", \\\"mixtral-8x7b-32768\\\" or \\\"gemma-7b-it\\\"\\n        string model;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 frequencyPenalty;\\n        // JSON string or empty string\\n        string logitBias;\\n        // 0 for null\\n        uint32 maxTokens;\\n        // int -20 - 20, Mapped to float -2.0 - 2.0. If bigger than 20 then null\\n        int8 presencePenalty;\\n        // JSON string or empty string\\n        string responseFormat;\\n        // 0 for null\\n        uint seed;\\n        // empty str for null\\n        string stop;\\n        // 0-20, > 20 for null\\n        uint temperature;\\n        // 0-100  percentage, > 100 for null\\n        uint topP;\\n        string user;\\n    }\\n\\n    struct GroqResponse {\\n        string id;\\n\\n        string content;\\n\\n        uint64 created;\\n        string model;\\n        string systemFingerprint;\\n        // kind of pointless since its always \\\"chat.completion\\\"?\\n        string object;\\n\\n        uint32 completionTokens;\\n        uint32 promptTokens;\\n        uint32 totalTokens;\\n    }\\n\\n    struct KnowledgeBaseQueryRequest {\\n        string cid;\\n        string query;\\n        uint32 num_documents;\\n    }\\n\\n    function createLlmCall(\\n        uint promptId\\n    ) external returns (uint);\\n\\n    function createGroqLlmCall(\\n        uint promptId,\\n        GroqRequest memory request\\n    ) external returns (uint);\\n\\n    function createOpenAiLlmCall(\\n        uint promptId,\\n        OpenAiRequest memory request\\n    ) external returns (uint);\\n\\n    function createFunctionCall(\\n        uint functionCallbackId,\\n        string memory functionType,\\n        string memory functionInput\\n    ) external returns (uint i);\\n\\n    function createKnowledgeBaseQuery(\\n        uint kbQueryCallbackId,\\n        string memory cid,\\n        string memory query,\\n        uint32 num_documents\\n    ) external returns (uint i);\\n}\",\"keccak256\":\"0xadf297ae3315255b8df039ffbd9fd4ea11f01d4d109c49d8ec765ae9b0cb578d\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523462000e8b5762003258803803806200001d8162000ed0565b92833981019060408183031262000e8b5780516001600160a01b038116919082900362000e8b576020810151906001600160401b03821162000e8b570182601f8201121562000e8b578051906001600160401b0382116200080d576200008d601f8301601f191660200162000ed0565b938285526020838301011162000e8b5760005b82811062000e7557505060206000918401015260018060a01b0319338160035416176003556004541617600455805160018060401b0381116200080d57600054600181811c9116801562000e6a575b6020821014620007ec57601f811162000e12575b50602091601f821160011462000d9d5791819260009262000d91575b50508160011b916000199060031b1c1916176000555b6040516101a081016001600160401b038111828210176200080d576040526200015d62000e90565b601381527f6770742d342d747572626f2d707265766965770000000000000000000000000060208201528152601560208201526200019a62000eb0565b6000815260408201526103e8606082015260156080820152620001bc62000e90565b600f81526e7b2274797065223a2274657874227d60881b602082015260a0820152600060c0820152620001ee62000eb0565b6000815260e0820152600a610100820152610120606581830152604051808281011060018060401b0383830111176200080d5781810160405261010081527f5b7b2274797065223a2266756e6374696f6e222c2266756e6374696f6e223a7b60208201527f226e616d65223a22696d6167655f67656e65726174696f6e222c22646573637260408201527f697074696f6e223a2247656e65726174657320616e20696d616765207573696e60608201527f672044616c6c652d32222c22706172616d6574657273223a7b2274797065223a60808201527f226f626a656374222c2270726f70657274696573223a7b2270726f6d7074223a60a08201527f7b2274797065223a22737472696e67222c226465736372697074696f6e223a2260c08201527f44616c6c652d322070726f6d707420746f2067656e657261746520616e20696d60e08201527f616765227d7d2c227265717569726564223a5b2270726f6d7074225d7d7d7d5d6101008201526101408301526200036d62000e90565b60048152636175746f60e01b60208201526101608301526200038e62000eb0565b60008152610180830152815180519092906001600160401b0381116200080d57600554600181811c9116801562000d86575b6020821014620007ec57601f811162000d3c575b506020601f821160011462000ccd578192939460009262000cc1575b50508160011b916000199060031b1c1916176005555b602081015160ff19600654169060ff1617600655604081015191825160018060401b0381116200080d57600754600181811c9116801562000cb6575b6020821014620007ec57601f811162000c50575b506020601f821160011462000be1578192939460009262000bd5575b50508160011b916000199060031b1c1916176007555b63ffffffff60608301511660085490608084015160201b64ff00000000169164ffffffffff1916171760085560a082015191825160018060401b0381116200080d57600954600181811c9116801562000bca575b6020821014620007ec57601f811162000b64575b506020601f821160011462000af5578192939460009262000ae9575b50508160011b916000199060031b1c1916176009555b60c0810151600a5560e081015180519092906001600160401b0381116200080d57600b54600181811c9116801562000ade575b6020821014620007ec57601f811162000a78575b506020601f821160011462000a095781929394600092620009fd575b50508160011b916000199060031b1c191617600b555b610100820151600c55810151600d5561014081015180519091906001600160401b0381116200080d57600e54600181811c91168015620009f2575b6020821014620007ec57601f811162000988575b50602092601f82116001146200091d579281929360009262000911575b50508160011b916000199060031b1c191617600e555b610160810151805191906001600160401b0383116200080d57600f54600181811c9116801562000906575b6020821014620007ec57601f8111620008ad575b50602090601f84116001146200082f5761018093916000918362000823575b50508160011b916000199060031b1c191617600f555b015180516001600160401b0381116200080d57601054600181811c9116801562000802575b6020821014620007ec57601f811162000782575b50602091601f821160011462000718579181926000926200070c575b50508160011b916000199060031b1c1916176010555b604051612321908162000ef78239f35b015190503880620006e6565b601f19821692601060005260206000209160005b85811062000769575083600195106200074f575b505050811b01601055620006fc565b015160001960f88460031b161c1916905538808062000740565b919260206001819286850151815501940192016200072c565b60106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae672601f830160051c81019160208410620007e1575b601f0160051c01905b818110620007d45750620006ca565b60008155600101620007c5565b9091508190620007bc565b634e487b7160e01b600052602260045260246000fd5b90607f1690620006b6565b634e487b7160e01b600052604160045260246000fd5b0151905038806200067b565b600f600090815260008051602062003238833981519152929190601f198616905b8181106200089457509160019391866101809794106200087a575b505050811b01600f5562000691565b015160001960f88460031b161c191690553880806200086b565b9293602060018192878601518155019501930162000850565b600f60005260008051602062003238833981519152601f850160051c81019160208610620008fb575b601f0160051c01905b818110620008ee57506200065c565b60008155600101620008df565b9091508190620008d6565b90607f169062000648565b01519050388062000607565b601f19821693600e60005260206000209160005b8681106200096f575083600195961062000955575b505050811b01600e556200061d565b015160001960f88460031b161c1916905538808062000946565b9192602060018192868501518155019401920162000931565b600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd601f830160051c81019160208410620009e7575b601f0160051c01905b818110620009da5750620005ea565b60008155600101620009cb565b9091508190620009c2565b90607f1690620005d6565b01519050388062000585565b600b60005260206000209060005b601f198416811062000a5f5750600193949583601f1981161062000a45575b505050811b01600b556200059b565b015160001960f88460031b161c1916905538808062000a36565b9091602060018192858a01518155019301910162000a17565b600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db9601f830160051c81016020841062000ad6575b601f830160051c8201811062000ac957505062000569565b6000815560010162000ab1565b508062000ab1565b90607f169062000555565b0151905038806200050c565b600960005260206000209060005b601f198416811062000b4b5750600193949583601f1981161062000b31575b505050811b0160095562000522565b015160001960f88460031b161c1916905538808062000b22565b9091602060018192858a01518155019301910162000b03565b60096000527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af601f830160051c81016020841062000bc2575b601f830160051c8201811062000bb5575050620004f0565b6000815560010162000b9d565b508062000b9d565b90607f1690620004dc565b01519050388062000472565b600760005260206000209060005b601f198416811062000c375750600193949583601f1981161062000c1d575b505050811b0160075562000488565b015160001960f88460031b161c1916905538808062000c0e565b9091602060018192858a01518155019301910162000bef565b60076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c688601f830160051c81016020841062000cae575b601f830160051c8201811062000ca157505062000456565b6000815560010162000c89565b508062000c89565b90607f169062000442565b015190503880620003f0565b600560005260206000209060005b601f198416811062000d235750600193949583601f1981161062000d09575b505050811b0160055562000406565b015160001960f88460031b161c1916905538808062000cfa565b9091602060018192858a01518155019301910162000cdb565b60056000526020600020601f830160051c81016020841062000d7e575b601f830160051c8201811062000d71575050620003d4565b6000815560010162000d59565b508062000d59565b90607f1690620003c0565b0151905038806200011f565b6000808052601f19831693600080516020620032188339815191529290915b85811062000df95750836001951062000ddf575b505050811b0160005562000135565b015160001960f88460031b161c1916905538808062000dd0565b9192602060018192868501518155019401920162000dbc565b6000805260008051602062003218833981519152601f830160051c8101916020841062000e5f575b601f0160051c01905b81811062000e52575062000103565b6000815560010162000e43565b909150819062000e3a565b90607f1690620000ef565b80602080928401015182828801015201620000a0565b600080fd5b60408051919082016001600160401b038111838210176200080d57604052565b60405190602082016001600160401b038111838210176200080d57604052565b6040519190601f01601f191682016001600160401b038111838210176200080d5760405256fe61014080604052600436101561001457600080fd5b60003560e01c9081632eab9c81146114b0575080634c69c00f1461140b5780634cecd88e146112585780637397454d146110c05780637c65d71114611088578063a89ae4ba1461105f578063c63b029514611004578063daec051f14610e70578063eb17429a14610de1578063ed6e39e514610d2f5763fbc6a8dd1461009957600080fd5b34610d0157610240366003190112610d015767ffffffffffffffff600435818111610d01576100cc90369060040161153d565b60a052602435818111610d01576100e790369060040161153d565b60c052604435818111610d015761010290369060040161153d565b606435828111610d015761011a90369060040161153d565b61012052608435828111610d015761013690369060040161153d565b9160a435818111610d015761014f90369060040161153d565b60c435828111610d015761016790369060040161153d565b60e435838111610d015761017f90369060040161153d565b61010435848111610d015761019890369060040161153d565b61012435858111610d01576101b190369060040161153d565b61014435868111610d01576101ca90369060040161153d565b61016435878111610d01576101e390369060040161153d565b9161018435888111610d01576101fd90369060040161153d565b936101a435898111610d015761021790369060040161153d565b956101c4358a8111610d015761023190369060040161153d565b978a6101e43511610d015761024c366101e43560040161153d565b99610204358c8111610d015761026690369060040161153d565b9b6102243511610d0157610ba49d60206104c09e61028a366102243560040161153d565b6080527f596f752061726520612068656c7066756c20617373697374616e74207468617482604051806101005201527f2068656c707320776974682074686520696e766573746d656e7420646563697360406101005101527f696f6e20696e206120706172746963756c61722063727970746f20746f6b656e60606101005101526217100560e91b60806101005101527f492077696c6c206769766520796f752074686520666f6c6c6f77696e6720696e60836101005101526b3337b936b0ba34b7b710168560a11b60a36101005101527f4e616d65206f66207468652049434f2070726f6a6563743a200000000000000060af61010051015260a05161039d815180928560c861010051019101611719565b600560f91b60c88261010051010152740283937b532b1ba103232b9b1b934b83a34b7b71d1605d1b60c9826101005101015260c051906103eb825180938660de856101005101019101611719565b610100510101600560f91b60de8201527f54686520746f6b656e20746f74616c20737570706c793a20000000000000000060df820152610434825180938560f785019101611719565b01600560f91b60f78201527f416c6c6f636174696f6e20666f7220666f756e646572732f7465616d3a20000060f88201526104816101168060e05261012051805194859285019101611719565b01600560f91b60e0518201527f416c6c6f636174696f6e20666f722061647669736f72733a20000000000000006101178201528151906104cb826101309460208685019101611719565b0190600560f91b908201527f416c6c6f636174696f6e20666f72207075626c69632073616c653a20000000006101318201528151906105148261014d9460208685019101611719565b0190600560f91b908201527f416c6c6f636174696f6e20666f7220707269766174652073616c653a2000000061014e82015281519061055d8261016b9460208685019101611719565b0190600560f91b908201527f416c6c6f636174696f6e20666f7220636f6d6d756e6974792f6d61726b65746961016c82015263037339d160e51b61018c8201528151906105b4826101909460208685019101611719565b0190600560f91b908201527f416c6c6f636174696f6e20666f722066757475726520646576656c6f706d656e6101918201526203a1d160ed1b6101b182015281519061060a826101b49460208685019101611719565b0190600560f91b908201526c02a37b5b2b710383934b1b29d1609d1b6101b5820152815190610643826101c29460208685019101611719565b0190600560f91b908201526902430b9321031b0b81d160b51b6101c3820152815190610679826101cd9460208685019101611719565b0190600560f91b9082015269029b7b33a1031b0b81d160b51b6101ce8201528151906106af826101d89460208685019101611719565b0190600560f91b908201527f41636365707465642063727970746f63757272656e6369657320666f7220696e6101d98201526903b32b9ba36b2b73a1d160b51b6101f982015281519061070c826102039460208685019101611719565b0190600560f91b908201527402a3432903a37b5b2b71031b7b739b2b739bab99d1605d1b61020482015281519061074d826102199460208685019101611719565b0190600560f91b908201527f54686520746f6b656e2063697263756c6174696e6720737570706c7920696e2061021a82015269032bc31b430b733b29d160b51b61023a8201528151906107aa826102449460208685019101611719565b0190600560f91b908201527f54686520746f6b656e20636f6d6d756e6974792073697a653a200000000000006102458201528151906107f38261025f9460208685019101611719565b0190600560f91b908201527002837b7b6103832b931b2b73a30b3b29d1607d1b610260820152815190610830826102719460208685019101611719565b0190600560f91b908201527502634b8bab4b234ba3c902837b7b6103b30b63ab29d160551b61027282015260805190815190610876826102889460208685019101611719565b600560f91b91019182018190526102898201527f596f75206d75737420666f6c6c6f772074686520666f6c6c6f77696e6720637261028a8201526834ba32b934b09d100560b91b6102aa8201527f596f752073686f756c642063686f6f73652074686520616d6f756e74206f66206102b38201527f746f6b656e7320796f752077616e7420746f20627579206163636f7264696e676102d38201527f20746f2074686520726561736f6e61626c6520707269636520796f75207468696102f38201527f6e6b20616e20617665726167652063727970746f207472616465722077696c6c6103138201526910313abc903337b9100560b11b6103338201527f596f752073686f756c642074656c6c206d6520686f77206d616e79207472616461033d8201527f6572732077696c6c20627579207468697320746f6b656e20617420612073696d61035d8201527f696c61722070726963652066726f6d207468652065786368616e67652061732061037d8201527f796f757273207570646174652074686520726573756c74696e6720707269636561039d8201527f20616e6420746f74616c20737570706c7920696e207468652065786368616e676103bd8201526232900560e91b6103dd8201527f54686572652073686f756c64206265206e6f20696e666f726d6174696f6e20616103e08201527f626f757420746865206f7065726174696f6e2c206f6e6c79207468652066696e6104008201527230b6102529a7a7103932b9b837b739b297100560691b6104208201527f54656c6c206d6520696e204a534f4e20666f726d617420776974686f757420746104338201527f686520636f646520626c6f636b206e6f746174696f6e20617320666f6c6c6f7761045382015263399d100560e11b610473820152623d900560e91b61047782015275113a37b5b2b7283934b1b2911d10111717171116100560511b61047a8201527f22746f74616c486f6c64657273223a20222e2e2e222c200a000000000000000061049082015275113a37b5b2b729bab838363c911d101117171711100560511b6104a8820152613e9160f11b6104be82015261010080516104a09281900392830190525191019061151b565b60025460005260016020526040600020336bffffffffffffffffffffffff60a01b82541617815560038101600381546000600285015561ffff1916179055610c59610bed6117c3565b604051610c0481610bfd816115df565b038261151b565b6020820152604051610c15816114e3565b600681526573797374656d60d01b60208201528152610c3860018401918261181f565b610c406117c3565b90610100516020830152610c52611a80565b825261181f565b60025460018101808211610d195760025560018060a01b0391826004541660206040518092633c38a5f560e01b825281600081610c998960048301611aa0565b03925af18015610d0d57610cdd575b50602092829154167f9697c88a6be3b3ed5062f2dcbd719a10914832320686f14e24f7756210a6685e600080a3604051908152f35b602090813d8311610d06575b610cf3818361151b565b81010312610d015738610ca8565b600080fd5b503d610ce9565b6040513d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b34610d0157602080600319360112610d01576004358060005260018281809452610d5f8260406000200154612238565b926000945b610d7b575b60405180610d778682611761565b0390f35b806000528282528260406000200154851015610ddc57610dd585610bfd610dba610dad879899886040600020016117ed565b5060405192838092611683565b610dc48289612282565b52610dcf8188612282565b5061202d565b9493610d64565b610d69565b34610d0157602080600319360112610d01576004358060005260018281809452610e118260406000200154612238565b926000945b610e285760405180610d778682611761565b806000528282528260406000200154851015610ddc57610e698584610dba610e58829899836040600020016117ed565b50610bfd6040518094819301611683565b9493610e16565b34610d01576040366003190112610d015760043567ffffffffffffffff8111610d0157610ea190369060040161153d565b60243560ff8116809103610d0157600254600052610f5160209260018452604060002092336bffffffffffffffffffffffff60a01b855416178455600384019081546000600287015561ffff1916179055610efa6117c3565b604051610f0a81610bfd816115df565b85820152604051610f1a816114e3565b600681526573797374656d60d01b868201528152610f3c60018501918261181f565b610f446117c3565b9185830152610c52611a80565b6002549060018201808311610d195760025560018060a01b03806004541691846040518094633c38a5f560e01b825281600081610f918a60048301611aa0565b03925af18015610d0d5784938691610fd5575b505054167f9697c88a6be3b3ed5062f2dcbd719a10914832320686f14e24f7756210a6685e600080a3604051908152f35b90809294503d8311610ffd575b610fec818361151b565b81010312610d015782918486610fa4565b503d610fe2565b34610d01576020366003190112610d015760043560005260016020526080604060002060ff60018060a01b038254169160036002820154910154906040519384526020840152818116604084015260081c1615156060820152f35b34610d01576000366003190112610d01576004546040516001600160a01b039091168152602090f35b34610d01576000366003190112610d0157610d776040516110ac81610bfd816115df565b60405191829160208352602083019061173c565b34610d01576060366003190112610d015760043567ffffffffffffffff602435818111610d01576110f590369060040161153d565b90604435818111610d015761110e90369060040161153d565b6004546001600160a01b0394906111289086163314611fc5565b806000526020946001865260406000209460ff600387015460081c16611221579360405195878701918783109083111761120b576111a188966111cf9661117a60009a6002966040528b815282612296565b15611203575b506111896117c3565b90611192611a80565b8252888201526001830161181f565b016111ac815461202d565b90556004541690604051948580948193633c38a5f560e01b835260048301611aa0565b03925af18015610d0d576111df57005b813d83116111fc575b6111f2818361151b565b81010312610d0157005b503d6111e8565b90508a611180565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260048101889052600f60248201526e149d5b881a5cc8199a5b9a5cda1959608a1b6044820152606490fd5b34610d0157600319606036820112610d015767ffffffffffffffff90602435828111610d015761016080928236030112610d01576040519182018281108482111761120b576040528060040135838111610d01576112bc906004369184010161153d565b82526024810135838111610d01576112da906004369184010161153d565b60208301526044810135838111610d01576112fb906004369184010161153d565b60408301526064810135838111610d015761131c906004369184010161153d565b606083015260848101358381168103610d0157608083015260a4810135838111610d0157611350906004369184010161153d565b60a083015260c4810135838111610d0157611371906004369184010161153d565b60c083015260e4810135838111610d01576113ca91611399610144926004369184010161153d565b60e08501526113ab6101048201611594565b6101008501526113be6101248201611594565b61012085015201611594565b610140820152604435918211610d01576113eb61140992369060040161153d565b9061140160018060a01b03600454163314611fc5565b60043561203c565b005b34610d01576020366003190112610d01576004356001600160a01b0381811691829003610d015760035416330361147557600480546001600160a01b031916821790557f107a9fafffb7ac890f780879e423760c9ffea8dcee8045681f40f542aede2cb8600080a2005b60405162461bcd60e51b815260206004820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b6044820152606490fd5b34610d01576020366003190112610d01576020906004356000526001825260ff60036040600020015460081c1615158152f35b6040810190811067ffffffffffffffff82111761120b57604052565b6020810190811067ffffffffffffffff82111761120b57604052565b90601f8019910116810190811067ffffffffffffffff82111761120b57604052565b81601f82011215610d015780359067ffffffffffffffff821161120b5760405192611572601f8401601f19166020018561151b565b82845260208383010111610d0157816000926020809301838601378301015290565b359063ffffffff82168203610d0157565b90600182811c921680156115d5575b60208310146115bf57565b634e487b7160e01b600052602260045260246000fd5b91607f16916115b4565b90600091600054906115f0826115a5565b80825291600190818116908115611666575060011461160e57505050565b91929350600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563916000925b84841061164e57505060209250010190565b8054602085850181019190915290930192810161163c565b915050602093945060ff929192191683830152151560051b010190565b9060009291805491611694836115a5565b9182825260019384811690816000146116f657506001146116b6575b50505050565b90919394506000526020928360002092846000945b8386106116e25750505050010190388080806116b0565b8054858701830152940193859082016116cb565b9294505050602093945060ff191683830152151560051b010190388080806116b0565b60005b83811061172c5750506000910152565b818101518382015260200161171c565b9060209161175581518092818552858086019101611719565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106117955750505050505090565b90919293949584806117b3600193603f198682030187528a5161173c565b9801930193019194939290611785565b604051906040820182811067ffffffffffffffff82111761120b5760405260606020838281520152565b80548210156118095760005260206000209060011b0190600090565b634e487b7160e01b600052603260045260246000fd5b80546801000000000000000081101561120b576118439060019283820181556117ed565b611a6a57825180519167ffffffffffffffff9283811161120b57849061186983546115a5565b93601f94858111611a19575b506020908583116001146119b0576020949291600091836119a5575b5050600019600383901b1c191690831b1781555b01940151805192831161120b576118bc85546115a5565b82811161195d575b5060209183116001146118fd579282939183926000946118f2575b50501b916000199060031b1c1916179055565b0151925038806118df565b90601f198316918560005283826000209360005b878282106119445750501061192b575b505050811b019055565b015160001960f88460031b161c19169055388080611921565b8486015187559095019460209485019487935001611911565b8560005260206000208380860160051c8201926020871061199c575b0160051c019085905b8281106119905750506118c4565b60008155018590611982565b92508192611979565b015190503880611891565b90601f1983169185600052816000209260005b818110611a01575091859391856020989694106119e8575b505050811b0181556118a5565b015160001960f88460031b161c191690553880806119db565b8284015185558a9690940193602093840193016119c3565b909192506000848152602081208680860160051c82019360208710611a61575b908a9695949392910160051c01915b828110611a56575050611875565b818155899501611a48565b93508193611a39565b634e487b7160e01b600052600060045260246000fd5b60405190611a8d826114e3565b60048252633ab9b2b960e11b6020830152565b90815260206040818301526101a0918260408201526000600591825494611ac6866115a5565b806101e08401526001968781169081600014611fa75750600114611f4a575b5060065460000b6060830152603f19908183850301608084015260009360075490611b0f826115a5565b91828252888a82169182600014611f2c575050600114611ed2575b505060085463ffffffff811660a0850152861c60000b60c0840152818385030160e084015260009360095490611b5f826115a5565b91828252888a82169182600014611eb4575050600114611e5a575b5050600a546101008401528284038201610120840152600b54600094611b9f826115a5565b91828252888a82169182600014611e3c575050600114611de2575b5050600c54610140840152600d546101608401528284038201610180840152600e54600094611be8826115a5565b91828252888a82169182600014611dc4575050600114611d6a575b5050828403820190830152600f54600093611c1d826115a5565b91828252878982169182600014611d4a575050600114611cec575b50506101c09082840301910152600093601054611c54816115a5565b80845293818316918215611ccd575050600114611c73575b5050505090565b9293509060106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67292846000945b838610611cb95750505050010138808080611c6c565b805485870183015294019385908201611ca3565b925093929495505060ff1916848401521515901b010138808080611c6c565b8691929450600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290886000925b858410611d3457505001019290506101c038611c38565b80548385018601528994909301928a9101611d1d565b60ff191683820152921515871b90910190910193506101c0905038611c38565b87929550600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd91896000935b828510611dae575050500101923880611c03565b80548585018701528a95909401938b9101611d9a565b60ff191683820152921515881b909101909101945038905080611c03565b87929550600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db991896000935b828510611e26575050500101923880611bba565b80548585018701528a95909401938b9101611e12565b60ff191683820152921515881b909101909101945038905080611bba565b8792955060096000527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af91896000935b828510611e9e575050500101923880611b7a565b80548585018701528a95909401938b9101611e8a565b60ff191683820152921515881b909101909101945038905080611b7a565b8792955060076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68891896000935b828510611f16575050500101923880611b2a565b80548585018701528a95909401938b9101611f02565b60ff191683820152921515881b909101909101945038905080611b2a565b909250836000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db085876000925b848410611f915750505061020091508201019138611ae5565b8054610200858801015201910190878791611f78565b929450506102009160ff1916828401521515841b8201019138611ae5565b15611fcc57565b60405162461bcd60e51b815260206004820152601460248201527343616c6c6572206973206e6f74206f7261636c6560601b6044820152606490fd5b60405190612015826114e3565b6009825268185cdcda5cdd185b9d60ba1b6020830152565b6000198114610d195760010190565b919091600090808252602090600182526040808420946120698251612060816114ff565b86815282612296565b156121d5575060028501805495600381019687549060ff821611156121c057508488016120a5815185519061209d826114ff565b898252612296565b15612188575b5050508086016120ca81518351906120c2826114ff565b878252612296565b156120e5575050835461ff0019166101001790935550505050565b839550849661213092949395606060018060a01b0360045416935192015196612142875198899687958694634b04236b60e01b8652600486015260606024860152606485019061173c565b8381036003190160448501529061173c565b03925af190811561217f575061215757505050565b813d8311612178575b61216a818361151b565b810103126121755750565b80fd5b503d612160565b513d85823e3d90fd5b60016121ac926121966117c3565b9251888401526121a4612008565b83520161181f565b6121b6815461202d565b90553880806120ab565b61ff0019166101001790965550505050505050565b9150506003945061220092506121e96117c3565b916121f2612008565b83528201526001830161181f565b6002810161220e815461202d565b905501805461ff001916610100179055565b67ffffffffffffffff811161120b5760051b60200190565b9061224282612220565b61224f604051918261151b565b8281528092612260601f1991612220565b019060005b82811061227157505050565b806060602080938501015201612265565b80518210156118095760209160051b010190565b90604051916020926122c48482816122b78183019687815193849201611719565b810103808452018261151b565b519020916122e46040519182816122b78183019687815193849201611719565b519020149056fea2646970667358221220d9856e5b922e4797eec608637672ad320e902e633c27d40cd4ebd294d634c0dc64736f6c63430008110033290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac802",
  "deployedBytecode": "0x61014080604052600436101561001457600080fd5b60003560e01c9081632eab9c81146114b0575080634c69c00f1461140b5780634cecd88e146112585780637397454d146110c05780637c65d71114611088578063a89ae4ba1461105f578063c63b029514611004578063daec051f14610e70578063eb17429a14610de1578063ed6e39e514610d2f5763fbc6a8dd1461009957600080fd5b34610d0157610240366003190112610d015767ffffffffffffffff600435818111610d01576100cc90369060040161153d565b60a052602435818111610d01576100e790369060040161153d565b60c052604435818111610d015761010290369060040161153d565b606435828111610d015761011a90369060040161153d565b61012052608435828111610d015761013690369060040161153d565b9160a435818111610d015761014f90369060040161153d565b60c435828111610d015761016790369060040161153d565b60e435838111610d015761017f90369060040161153d565b61010435848111610d015761019890369060040161153d565b61012435858111610d01576101b190369060040161153d565b61014435868111610d01576101ca90369060040161153d565b61016435878111610d01576101e390369060040161153d565b9161018435888111610d01576101fd90369060040161153d565b936101a435898111610d015761021790369060040161153d565b956101c4358a8111610d015761023190369060040161153d565b978a6101e43511610d015761024c366101e43560040161153d565b99610204358c8111610d015761026690369060040161153d565b9b6102243511610d0157610ba49d60206104c09e61028a366102243560040161153d565b6080527f596f752061726520612068656c7066756c20617373697374616e74207468617482604051806101005201527f2068656c707320776974682074686520696e766573746d656e7420646563697360406101005101527f696f6e20696e206120706172746963756c61722063727970746f20746f6b656e60606101005101526217100560e91b60806101005101527f492077696c6c206769766520796f752074686520666f6c6c6f77696e6720696e60836101005101526b3337b936b0ba34b7b710168560a11b60a36101005101527f4e616d65206f66207468652049434f2070726f6a6563743a200000000000000060af61010051015260a05161039d815180928560c861010051019101611719565b600560f91b60c88261010051010152740283937b532b1ba103232b9b1b934b83a34b7b71d1605d1b60c9826101005101015260c051906103eb825180938660de856101005101019101611719565b610100510101600560f91b60de8201527f54686520746f6b656e20746f74616c20737570706c793a20000000000000000060df820152610434825180938560f785019101611719565b01600560f91b60f78201527f416c6c6f636174696f6e20666f7220666f756e646572732f7465616d3a20000060f88201526104816101168060e05261012051805194859285019101611719565b01600560f91b60e0518201527f416c6c6f636174696f6e20666f722061647669736f72733a20000000000000006101178201528151906104cb826101309460208685019101611719565b0190600560f91b908201527f416c6c6f636174696f6e20666f72207075626c69632073616c653a20000000006101318201528151906105148261014d9460208685019101611719565b0190600560f91b908201527f416c6c6f636174696f6e20666f7220707269766174652073616c653a2000000061014e82015281519061055d8261016b9460208685019101611719565b0190600560f91b908201527f416c6c6f636174696f6e20666f7220636f6d6d756e6974792f6d61726b65746961016c82015263037339d160e51b61018c8201528151906105b4826101909460208685019101611719565b0190600560f91b908201527f416c6c6f636174696f6e20666f722066757475726520646576656c6f706d656e6101918201526203a1d160ed1b6101b182015281519061060a826101b49460208685019101611719565b0190600560f91b908201526c02a37b5b2b710383934b1b29d1609d1b6101b5820152815190610643826101c29460208685019101611719565b0190600560f91b908201526902430b9321031b0b81d160b51b6101c3820152815190610679826101cd9460208685019101611719565b0190600560f91b9082015269029b7b33a1031b0b81d160b51b6101ce8201528151906106af826101d89460208685019101611719565b0190600560f91b908201527f41636365707465642063727970746f63757272656e6369657320666f7220696e6101d98201526903b32b9ba36b2b73a1d160b51b6101f982015281519061070c826102039460208685019101611719565b0190600560f91b908201527402a3432903a37b5b2b71031b7b739b2b739bab99d1605d1b61020482015281519061074d826102199460208685019101611719565b0190600560f91b908201527f54686520746f6b656e2063697263756c6174696e6720737570706c7920696e2061021a82015269032bc31b430b733b29d160b51b61023a8201528151906107aa826102449460208685019101611719565b0190600560f91b908201527f54686520746f6b656e20636f6d6d756e6974792073697a653a200000000000006102458201528151906107f38261025f9460208685019101611719565b0190600560f91b908201527002837b7b6103832b931b2b73a30b3b29d1607d1b610260820152815190610830826102719460208685019101611719565b0190600560f91b908201527502634b8bab4b234ba3c902837b7b6103b30b63ab29d160551b61027282015260805190815190610876826102889460208685019101611719565b600560f91b91019182018190526102898201527f596f75206d75737420666f6c6c6f772074686520666f6c6c6f77696e6720637261028a8201526834ba32b934b09d100560b91b6102aa8201527f596f752073686f756c642063686f6f73652074686520616d6f756e74206f66206102b38201527f746f6b656e7320796f752077616e7420746f20627579206163636f7264696e676102d38201527f20746f2074686520726561736f6e61626c6520707269636520796f75207468696102f38201527f6e6b20616e20617665726167652063727970746f207472616465722077696c6c6103138201526910313abc903337b9100560b11b6103338201527f596f752073686f756c642074656c6c206d6520686f77206d616e79207472616461033d8201527f6572732077696c6c20627579207468697320746f6b656e20617420612073696d61035d8201527f696c61722070726963652066726f6d207468652065786368616e67652061732061037d8201527f796f757273207570646174652074686520726573756c74696e6720707269636561039d8201527f20616e6420746f74616c20737570706c7920696e207468652065786368616e676103bd8201526232900560e91b6103dd8201527f54686572652073686f756c64206265206e6f20696e666f726d6174696f6e20616103e08201527f626f757420746865206f7065726174696f6e2c206f6e6c79207468652066696e6104008201527230b6102529a7a7103932b9b837b739b297100560691b6104208201527f54656c6c206d6520696e204a534f4e20666f726d617420776974686f757420746104338201527f686520636f646520626c6f636b206e6f746174696f6e20617320666f6c6c6f7761045382015263399d100560e11b610473820152623d900560e91b61047782015275113a37b5b2b7283934b1b2911d10111717171116100560511b61047a8201527f22746f74616c486f6c64657273223a20222e2e2e222c200a000000000000000061049082015275113a37b5b2b729bab838363c911d101117171711100560511b6104a8820152613e9160f11b6104be82015261010080516104a09281900392830190525191019061151b565b60025460005260016020526040600020336bffffffffffffffffffffffff60a01b82541617815560038101600381546000600285015561ffff1916179055610c59610bed6117c3565b604051610c0481610bfd816115df565b038261151b565b6020820152604051610c15816114e3565b600681526573797374656d60d01b60208201528152610c3860018401918261181f565b610c406117c3565b90610100516020830152610c52611a80565b825261181f565b60025460018101808211610d195760025560018060a01b0391826004541660206040518092633c38a5f560e01b825281600081610c998960048301611aa0565b03925af18015610d0d57610cdd575b50602092829154167f9697c88a6be3b3ed5062f2dcbd719a10914832320686f14e24f7756210a6685e600080a3604051908152f35b602090813d8311610d06575b610cf3818361151b565b81010312610d015738610ca8565b600080fd5b503d610ce9565b6040513d6000823e3d90fd5b634e487b7160e01b600052601160045260246000fd5b34610d0157602080600319360112610d01576004358060005260018281809452610d5f8260406000200154612238565b926000945b610d7b575b60405180610d778682611761565b0390f35b806000528282528260406000200154851015610ddc57610dd585610bfd610dba610dad879899886040600020016117ed565b5060405192838092611683565b610dc48289612282565b52610dcf8188612282565b5061202d565b9493610d64565b610d69565b34610d0157602080600319360112610d01576004358060005260018281809452610e118260406000200154612238565b926000945b610e285760405180610d778682611761565b806000528282528260406000200154851015610ddc57610e698584610dba610e58829899836040600020016117ed565b50610bfd6040518094819301611683565b9493610e16565b34610d01576040366003190112610d015760043567ffffffffffffffff8111610d0157610ea190369060040161153d565b60243560ff8116809103610d0157600254600052610f5160209260018452604060002092336bffffffffffffffffffffffff60a01b855416178455600384019081546000600287015561ffff1916179055610efa6117c3565b604051610f0a81610bfd816115df565b85820152604051610f1a816114e3565b600681526573797374656d60d01b868201528152610f3c60018501918261181f565b610f446117c3565b9185830152610c52611a80565b6002549060018201808311610d195760025560018060a01b03806004541691846040518094633c38a5f560e01b825281600081610f918a60048301611aa0565b03925af18015610d0d5784938691610fd5575b505054167f9697c88a6be3b3ed5062f2dcbd719a10914832320686f14e24f7756210a6685e600080a3604051908152f35b90809294503d8311610ffd575b610fec818361151b565b81010312610d015782918486610fa4565b503d610fe2565b34610d01576020366003190112610d015760043560005260016020526080604060002060ff60018060a01b038254169160036002820154910154906040519384526020840152818116604084015260081c1615156060820152f35b34610d01576000366003190112610d01576004546040516001600160a01b039091168152602090f35b34610d01576000366003190112610d0157610d776040516110ac81610bfd816115df565b60405191829160208352602083019061173c565b34610d01576060366003190112610d015760043567ffffffffffffffff602435818111610d01576110f590369060040161153d565b90604435818111610d015761110e90369060040161153d565b6004546001600160a01b0394906111289086163314611fc5565b806000526020946001865260406000209460ff600387015460081c16611221579360405195878701918783109083111761120b576111a188966111cf9661117a60009a6002966040528b815282612296565b15611203575b506111896117c3565b90611192611a80565b8252888201526001830161181f565b016111ac815461202d565b90556004541690604051948580948193633c38a5f560e01b835260048301611aa0565b03925af18015610d0d576111df57005b813d83116111fc575b6111f2818361151b565b81010312610d0157005b503d6111e8565b90508a611180565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260048101889052600f60248201526e149d5b881a5cc8199a5b9a5cda1959608a1b6044820152606490fd5b34610d0157600319606036820112610d015767ffffffffffffffff90602435828111610d015761016080928236030112610d01576040519182018281108482111761120b576040528060040135838111610d01576112bc906004369184010161153d565b82526024810135838111610d01576112da906004369184010161153d565b60208301526044810135838111610d01576112fb906004369184010161153d565b60408301526064810135838111610d015761131c906004369184010161153d565b606083015260848101358381168103610d0157608083015260a4810135838111610d0157611350906004369184010161153d565b60a083015260c4810135838111610d0157611371906004369184010161153d565b60c083015260e4810135838111610d01576113ca91611399610144926004369184010161153d565b60e08501526113ab6101048201611594565b6101008501526113be6101248201611594565b61012085015201611594565b610140820152604435918211610d01576113eb61140992369060040161153d565b9061140160018060a01b03600454163314611fc5565b60043561203c565b005b34610d01576020366003190112610d01576004356001600160a01b0381811691829003610d015760035416330361147557600480546001600160a01b031916821790557f107a9fafffb7ac890f780879e423760c9ffea8dcee8045681f40f542aede2cb8600080a2005b60405162461bcd60e51b815260206004820152601360248201527221b0b63632b91034b9903737ba1037bbb732b960691b6044820152606490fd5b34610d01576020366003190112610d01576020906004356000526001825260ff60036040600020015460081c1615158152f35b6040810190811067ffffffffffffffff82111761120b57604052565b6020810190811067ffffffffffffffff82111761120b57604052565b90601f8019910116810190811067ffffffffffffffff82111761120b57604052565b81601f82011215610d015780359067ffffffffffffffff821161120b5760405192611572601f8401601f19166020018561151b565b82845260208383010111610d0157816000926020809301838601378301015290565b359063ffffffff82168203610d0157565b90600182811c921680156115d5575b60208310146115bf57565b634e487b7160e01b600052602260045260246000fd5b91607f16916115b4565b90600091600054906115f0826115a5565b80825291600190818116908115611666575060011461160e57505050565b91929350600080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563916000925b84841061164e57505060209250010190565b8054602085850181019190915290930192810161163c565b915050602093945060ff929192191683830152151560051b010190565b9060009291805491611694836115a5565b9182825260019384811690816000146116f657506001146116b6575b50505050565b90919394506000526020928360002092846000945b8386106116e25750505050010190388080806116b0565b8054858701830152940193859082016116cb565b9294505050602093945060ff191683830152151560051b010190388080806116b0565b60005b83811061172c5750506000910152565b818101518382015260200161171c565b9060209161175581518092818552858086019101611719565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106117955750505050505090565b90919293949584806117b3600193603f198682030187528a5161173c565b9801930193019194939290611785565b604051906040820182811067ffffffffffffffff82111761120b5760405260606020838281520152565b80548210156118095760005260206000209060011b0190600090565b634e487b7160e01b600052603260045260246000fd5b80546801000000000000000081101561120b576118439060019283820181556117ed565b611a6a57825180519167ffffffffffffffff9283811161120b57849061186983546115a5565b93601f94858111611a19575b506020908583116001146119b0576020949291600091836119a5575b5050600019600383901b1c191690831b1781555b01940151805192831161120b576118bc85546115a5565b82811161195d575b5060209183116001146118fd579282939183926000946118f2575b50501b916000199060031b1c1916179055565b0151925038806118df565b90601f198316918560005283826000209360005b878282106119445750501061192b575b505050811b019055565b015160001960f88460031b161c19169055388080611921565b8486015187559095019460209485019487935001611911565b8560005260206000208380860160051c8201926020871061199c575b0160051c019085905b8281106119905750506118c4565b60008155018590611982565b92508192611979565b015190503880611891565b90601f1983169185600052816000209260005b818110611a01575091859391856020989694106119e8575b505050811b0181556118a5565b015160001960f88460031b161c191690553880806119db565b8284015185558a9690940193602093840193016119c3565b909192506000848152602081208680860160051c82019360208710611a61575b908a9695949392910160051c01915b828110611a56575050611875565b818155899501611a48565b93508193611a39565b634e487b7160e01b600052600060045260246000fd5b60405190611a8d826114e3565b60048252633ab9b2b960e11b6020830152565b90815260206040818301526101a0918260408201526000600591825494611ac6866115a5565b806101e08401526001968781169081600014611fa75750600114611f4a575b5060065460000b6060830152603f19908183850301608084015260009360075490611b0f826115a5565b91828252888a82169182600014611f2c575050600114611ed2575b505060085463ffffffff811660a0850152861c60000b60c0840152818385030160e084015260009360095490611b5f826115a5565b91828252888a82169182600014611eb4575050600114611e5a575b5050600a546101008401528284038201610120840152600b54600094611b9f826115a5565b91828252888a82169182600014611e3c575050600114611de2575b5050600c54610140840152600d546101608401528284038201610180840152600e54600094611be8826115a5565b91828252888a82169182600014611dc4575050600114611d6a575b5050828403820190830152600f54600093611c1d826115a5565b91828252878982169182600014611d4a575050600114611cec575b50506101c09082840301910152600093601054611c54816115a5565b80845293818316918215611ccd575050600114611c73575b5050505090565b9293509060106000527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae67292846000945b838610611cb95750505050010138808080611c6c565b805485870183015294019385908201611ca3565b925093929495505060ff1916848401521515901b010138808080611c6c565b8691929450600f6000527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac80290886000925b858410611d3457505001019290506101c038611c38565b80548385018601528994909301928a9101611d1d565b60ff191683820152921515871b90910190910193506101c0905038611c38565b87929550600e6000527fbb7b4a454dc3493923482f07822329ed19e8244eff582cc204f8554c3620c3fd91896000935b828510611dae575050500101923880611c03565b80548585018701528a95909401938b9101611d9a565b60ff191683820152921515881b909101909101945038905080611c03565b87929550600b6000527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db991896000935b828510611e26575050500101923880611bba565b80548585018701528a95909401938b9101611e12565b60ff191683820152921515881b909101909101945038905080611bba565b8792955060096000527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af91896000935b828510611e9e575050500101923880611b7a565b80548585018701528a95909401938b9101611e8a565b60ff191683820152921515881b909101909101945038905080611b7a565b8792955060076000527fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68891896000935b828510611f16575050500101923880611b2a565b80548585018701528a95909401938b9101611f02565b60ff191683820152921515881b909101909101945038905080611b2a565b909250836000527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db085876000925b848410611f915750505061020091508201019138611ae5565b8054610200858801015201910190878791611f78565b929450506102009160ff1916828401521515841b8201019138611ae5565b15611fcc57565b60405162461bcd60e51b815260206004820152601460248201527343616c6c6572206973206e6f74206f7261636c6560601b6044820152606490fd5b60405190612015826114e3565b6009825268185cdcda5cdd185b9d60ba1b6020830152565b6000198114610d195760010190565b919091600090808252602090600182526040808420946120698251612060816114ff565b86815282612296565b156121d5575060028501805495600381019687549060ff821611156121c057508488016120a5815185519061209d826114ff565b898252612296565b15612188575b5050508086016120ca81518351906120c2826114ff565b878252612296565b156120e5575050835461ff0019166101001790935550505050565b839550849661213092949395606060018060a01b0360045416935192015196612142875198899687958694634b04236b60e01b8652600486015260606024860152606485019061173c565b8381036003190160448501529061173c565b03925af190811561217f575061215757505050565b813d8311612178575b61216a818361151b565b810103126121755750565b80fd5b503d612160565b513d85823e3d90fd5b60016121ac926121966117c3565b9251888401526121a4612008565b83520161181f565b6121b6815461202d565b90553880806120ab565b61ff0019166101001790965550505050505050565b9150506003945061220092506121e96117c3565b916121f2612008565b83528201526001830161181f565b6002810161220e815461202d565b905501805461ff001916610100179055565b67ffffffffffffffff811161120b5760051b60200190565b9061224282612220565b61224f604051918261151b565b8281528092612260601f1991612220565b019060005b82811061227157505050565b806060602080938501015201612265565b80518210156118095760209160051b010190565b90604051916020926122c48482816122b78183019687815193849201611719565b810103808452018261151b565b519020916122e46040519182816122b78183019687815193849201611719565b519020149056fea2646970667358221220d9856e5b922e4797eec608637672ad320e902e633c27d40cd4ebd294d634c0dc64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4,
        "contract": "contracts/TraderAgent.sol:TraderAgent",
        "label": "prompt",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/TraderAgent.sol:TraderAgent",
        "label": "agentRuns",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(AgentRun)22_storage)"
      },
      {
        "astId": 29,
        "contract": "contracts/TraderAgent.sol:TraderAgent",
        "label": "agentRunCount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 37,
        "contract": "contracts/TraderAgent.sol:TraderAgent",
        "label": "owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 39,
        "contract": "contracts/TraderAgent.sol:TraderAgent",
        "label": "oracleAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 46,
        "contract": "contracts/TraderAgent.sol:TraderAgent",
        "label": "config",
        "offset": 0,
        "slot": "5",
        "type": "t_struct(OpenAiRequest)780_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Message)9_storage)dyn_storage": {
        "base": "t_struct(Message)9_storage",
        "encoding": "dynamic_array",
        "label": "struct TraderAgent.Message[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int8": {
        "encoding": "inplace",
        "label": "int8",
        "numberOfBytes": "1"
      },
      "t_mapping(t_uint256,t_struct(AgentRun)22_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TraderAgent.AgentRun)",
        "numberOfBytes": "32",
        "value": "t_struct(AgentRun)22_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AgentRun)22_storage": {
        "encoding": "inplace",
        "label": "struct TraderAgent.AgentRun",
        "members": [
          {
            "astId": 11,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "messages",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(Message)9_storage)dyn_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "responsesCount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 19,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "max_iterations",
            "offset": 0,
            "slot": "3",
            "type": "t_uint8"
          },
          {
            "astId": 21,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "is_finished",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Message)9_storage": {
        "encoding": "inplace",
        "label": "struct TraderAgent.Message",
        "members": [
          {
            "astId": 6,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "role",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 8,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "content",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(OpenAiRequest)780_storage": {
        "encoding": "inplace",
        "label": "struct IOracle.OpenAiRequest",
        "members": [
          {
            "astId": 755,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "model",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 757,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "frequencyPenalty",
            "offset": 0,
            "slot": "1",
            "type": "t_int8"
          },
          {
            "astId": 759,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "logitBias",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 761,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "maxTokens",
            "offset": 0,
            "slot": "3",
            "type": "t_uint32"
          },
          {
            "astId": 763,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "presencePenalty",
            "offset": 4,
            "slot": "3",
            "type": "t_int8"
          },
          {
            "astId": 765,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "responseFormat",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 767,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "seed",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 769,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "stop",
            "offset": 0,
            "slot": "6",
            "type": "t_string_storage"
          },
          {
            "astId": 771,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "temperature",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 773,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "topP",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 775,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "tools",
            "offset": 0,
            "slot": "9",
            "type": "t_string_storage"
          },
          {
            "astId": 777,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "toolChoice",
            "offset": 0,
            "slot": "10",
            "type": "t_string_storage"
          },
          {
            "astId": 779,
            "contract": "contracts/TraderAgent.sol:TraderAgent",
            "label": "user",
            "offset": 0,
            "slot": "11",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}